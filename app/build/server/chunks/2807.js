"use strict";exports.id=2807,exports.ids=[2807],exports.modules={62807:(e,t,i)=>{i.d(t,{Y:()=>unlinkExtension,b:()=>symlinkExtensions});var s=i(57147),n=i(73292),r=i(71017),o=i.n(r),l=i(38316),a=i(22353),f=i(56368);l.z.object({fileName:l.z.string(),path:l.z.string(),extensionName:l.z.string()}),l.z.object({errorIfExists:l.z.boolean().optional(),errorIfNotExists:l.z.boolean().optional()});let symlinkExtensions=async e=>{let t=e.extensions.slice(),i=[];if(0===t.length)return{report:"No extensions registered, nothing to do.",cleanedUpExtensions:i,symlinkResults:[]};let r=o().resolve(o().join(e.gitRepoPath,".git","info","exclude")),l=await Promise.all(t.map(async t=>{let l=o().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),m=o().resolve(o().join(e.gitRepoPath,l)),h=(0,s.existsSync)(m);if((0,s.existsSync)(o().resolve(o().join(t.path,t.fileName)))){i.push(t);let s=RegExp(`^${l}$`),u=await (0,a.M_)(r,s);try{if(!1===h)await (0,n.symlink)(o().resolve(o().join(t.path,t.fileName)),m);else if(e.options?.errorIfExists)throw new f.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" already exists.`});return!1===u&&await (0,n.appendFile)(r,`${l}
`),{result:"success",message:h?`Symlink for "${t.fileName}" already exists. Skipping.`:`Symlink for "${t.fileName}" created`}}catch(e){return{result:"error",message:`Failed to create symlink for "${t.fileName}"${e instanceof Error?`:
	${e.message}`:""}`}}}else{if(h){let s=await unlinkExtension({extension:t,gitRepoPath:e.gitRepoPath,relativePath:e.relativePath});if("error"===s.result)return i.push(t),{result:"error",message:`Failed to remove symlink for non-existent extension file "${t.fileName}" in "${t.path}"`}}return{result:"error",message:`Extension file "${t.fileName}" does not exist in "${t.path}". It has been unlinked and removed from the list of registered extensions`}}}));i.length!==t.length&&e.saveExtensions(i);let m=l.filter(e=>"success"===e.result).length,h=`Symlinked ${m}/${l.length} extension(s): 
`;return l.forEach(e=>{h+=`${e.message} 
`}),{report:h,cleanedUpExtensions:i,symlinkResults:l}},unlinkExtension=async e=>{let t=e.extension,i=o().join("function"==typeof e.relativePath?e.relativePath(t):e.relativePath,t.fileName),r=o().resolve(e.gitRepoPath,".git","info","exclude"),l=o().resolve(o().join(e.gitRepoPath,i));if(!(0,s.existsSync)(o().resolve(o().join(t.path,t.fileName))))return{result:"success",message:`Extension file "${t.fileName}" does not exist in ${t.path}. Nothing to do.`};{let o=RegExp(`^${i}$`);await (0,a.u5)(r,o,null);let m=(0,s.existsSync)(l);try{if(!0===m)await (0,n.unlink)(l);else if(e.options?.errorIfNotExists)throw new f.TRPCError({code:"PRECONDITION_FAILED",message:`Symlink for "${t.fileName}" doesn't exist.`});return{result:"success",message:m?`Symlink for "${t.fileName}" has been removed.`:`Symlink for "${t.fileName}" doesn't exist. Skipping.`}}catch(e){return{result:"error",message:`Failed to remove symlink for "${t.fileName}"`}}}}}};