{"version":3,"file":"static/chunks/8108.65e679300ad5c7a0.js","mappings":"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","sources":["webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@4.20.0_@tensorflow+tfjs-core@4.20.0_encoding@0.1.13_/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out|fs","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@4.20.0_@tensorflow+tfjs-core@4.20.0_encoding@0.1.13_/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out|os","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@4.20.0_@tensorflow+tfjs-core@4.20.0_encoding@0.1.13_/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out|path","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@4.20.0_@tensorflow+tfjs-core@4.20.0_encoding@0.1.13_/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out|perf_hooks","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-backend-wasm@4.20.0_@tensorflow+tfjs-core@4.20.0_encoding@0.1.13_/node_modules/@tensorflow/tfjs-backend-wasm/wasm-out|worker_threads","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-core@4.20.0_encoding@0.1.13/node_modules/@tensorflow/tfjs-core/dist/platforms|node-fetch","webpack://_N_E/ignored|/home/runner/work/RatOS-configurator/RatOS-configurator/src/node_modules/.pnpm/@tensorflow+tfjs-core@4.20.0_encoding@0.1.13/node_modules/@tensorflow/tfjs-core/dist/platforms|util","webpack://_N_E/./app/analysis/_worker/input-shaper.ts","webpack://_N_E/./app/analysis/periodogram.ts","webpack://_N_E/./app/analysis/_worker/stream-utils.ts","webpack://_N_E/./helpers/logger.ts","webpack://_N_E/./utils/trpc.ts","webpack://_N_E/./helpers/trpc.ts","webpack://_N_E/./zods/util.tsx","webpack://_N_E/./app/_helpers/logger.ts","webpack://_N_E/./app/analysis/_worker/psd.ts","webpack://_N_E/./app/analysis/_worker/shapers.ts","webpack://_N_E/./app/analysis/math.ts","webpack://_N_E/webpack/bootstrap","webpack://_N_E/webpack/runtime/chunk loaded","webpack://_N_E/webpack/runtime/compat get default export","webpack://_N_E/webpack/runtime/create fake namespace object","webpack://_N_E/webpack/runtime/define property getters","webpack://_N_E/webpack/runtime/ensure chunk","webpack://_N_E/webpack/runtime/get javascript chunk filename","webpack://_N_E/webpack/runtime/get mini-css chunk filename","webpack://_N_E/webpack/runtime/global","webpack://_N_E/webpack/runtime/hasOwnProperty shorthand","webpack://_N_E/webpack/runtime/make namespace object","webpack://_N_E/webpack/runtime/trusted types policy","webpack://_N_E/webpack/runtime/trusted types script url","webpack://_N_E/webpack/runtime/publicPath","webpack://_N_E/webpack/runtime/importScripts chunk loading","webpack://_N_E/webpack/runtime/startup chunk dependencies","webpack://_N_E/webpack/before-startup","webpack://_N_E/webpack/startup","webpack://_N_E/webpack/after-startup","webpack://_N_E/<anon>"],"sourcesContent":["/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","'use client';\n/**\n * Adapted from Dmitry Butyugin <dmbutyugin@google.com> input shaper code in Klipper.\n * This file may be distributed under the terms of the GNU GPLv3 license.\n */\nimport {\n\tTensor1D,\n\tsum,\n\tmax,\n\tpow,\n\tdiv,\n\tsub,\n\tmul,\n\ttensor1d,\n\texp,\n\tsin,\n\tcos,\n\touterProduct,\n\tslice,\n\tzeros,\n\tstack,\n\tsqrt,\n\tslice1d,\n\ttidy,\n\tsetBackend,\n} from '@tensorflow/tfjs-core';\nimport { setWasmPaths } from '@tensorflow/tfjs-backend-wasm';\n\nimport type { TypedArrayPSD } from '@/app/analysis/periodogram';\nimport { INPUT_SHAPERS, InputShaperModel, Shaper, ShaperModels } from '@/app/analysis/_worker/shapers';\nimport { PSD } from '@/zods/analysis';\nimport { shadableTWColors } from '@/app/_helpers/colors';\nimport { sumArray } from '@/app/analysis/math';\n\nexport type InputShaperWorkerInput =\n\t| {\n\t\t\tid?: number;\n\t\t\ttype: 'findBestShaper';\n\t\t\tcalibrationData: TypedArrayPSD | PSD;\n\t\t\tscv: number;\n\t\t\tshaperFreqs?: [number | null, number | null, number | null];\n\t\t\tdampingRatio?: number;\n\t\t\tmaxSmoothing?: number;\n\t\t\ttestDampingRatios?: number[];\n\t\t\tmaxFreq?: number;\n\t  }\n\t| {\n\t\t\ttype: 'cancelJob';\n\t\t\tid: number;\n\t  };\n\nexport type InputShaperWorkerOutput =\n\t| {\n\t\t\ttype: 'findBestShaper';\n\t\t\tresult: ShaperCalibrationResult | null;\n\t\t\tjobId: number;\n\t\t\tshapers: (ShaperCalibrationResult | null)[];\n\t  }\n\t| {\n\t\t\ttype: 'fitShaper';\n\t\t\tjobId: number;\n\t\t\tresult: ShaperCalibrationResult | null;\n\t  }\n\t| {\n\t\t\ttype: 'jobCancelled';\n\t\t\tid: number;\n\t  }\n\t| {\n\t\t\ttype: 'fitShaperProgress';\n\t\t\tmodel: ShaperModels;\n\t\t\tjobId: number;\n\t\t\tprogress: number;\n\t  }\n\t| {\n\t\t\ttype: 'findBestShaperProgress';\n\t\t\tjobId: number;\n\t\t\tprogress: number;\n\t  };\ndeclare function postMessage(message: InputShaperWorkerOutput, targetOrigin: string, transfer?: Transferable[]): void;\ndeclare function postMessage(message: InputShaperWorkerOutput, options?: WindowPostMessageOptions): void;\n\nexport interface InputShaperWorker extends Worker {\n\tonmessage(this: Worker, ev: MessageEvent<InputShaperWorkerOutput>): any;\n\tpostMessage(message: InputShaperWorkerInput, transfer?: Transferable[]): void;\n\tpostMessage(message: InputShaperWorkerInput, options?: StructuredSerializeOptions): void;\n}\nclass JobCancelledError extends Error {\n\tconstructor() {\n\t\tsuper('Job cancelled');\n\t}\n}\n\nconst jobs = new Map<number, AbortController>();\nlet _id = 0;\n\nexport const shaperDefaults = {\n\tDEFAULT_DAMPING_RATIO: 0.1,\n\tSHAPER_VIBRATION_REDUCTION: 20,\n\tTEST_DAMPING_RATIOS: [0.075, 0.1, 0.15],\n\tMAX_SHAPER_FREQ: 150,\n\tWINDOW_T_SEC: 0.5,\n\tMIN_FREQ: 5,\n\tMAX_FREQ: 200,\n\t// Just some empirically chosen value which produces good projections\n\t// for max_accel without much smoothing\n\tTARGET_SMOOTHING: 0.12,\n};\n\nconst cancelJob = (id: number) => {\n\tconst controller = jobs.get(id);\n\tif (controller && controller.signal.aborted === false) {\n\t\tcontroller.abort();\n\t}\n\tjobs.delete(id);\n};\n\nconst throwIfCancelled = (signal: AbortSignal) => {\n\tif (signal.aborted) {\n\t\tthrow new JobCancelledError();\n\t}\n};\n\nasync function getShaperSmoothing(shaper: Shaper, accel: number = 5000, scv: number = 5): Promise<number> {\n\tconst halfAccel = accel * 0.5;\n\n\tconst [A, T] = shaper;\n\tconst invD = 1 / sumArray(A);\n\tconst n = T.length;\n\t// Calculate input shaper shift\n\tconst ts = sumArray(A.map((a, i) => a * T[i])) * invD;\n\n\t// Calculate offset for 90 and 180 degrees turn\n\tlet offset90 = 0;\n\tlet offset180 = 0;\n\tfor (let i = 0; i < n; i++) {\n\t\tif (T[i] >= ts) {\n\t\t\t// Calculate offset for one of the axes\n\t\t\toffset90 += A[i] * (scv + halfAccel * (T[i] - ts)) * (T[i] - ts);\n\t\t}\n\t\toffset180 += A[i] * halfAccel * (T[i] - ts) ** 2;\n\t}\n\toffset90 *= invD * Math.sqrt(2);\n\toffset180 *= invD;\n\treturn Math.max(offset90, offset180);\n}\n\nasync function bisect(fn: (x: number) => Promise<boolean>): Promise<number> {\n\tlet left = 1.0;\n\tlet right = 1.0;\n\tif (!(await fn(1e-9))) {\n\t\treturn 0.0;\n\t}\n\twhile (!(await fn(left))) {\n\t\tright = left;\n\t\tleft *= 0.5;\n\t}\n\tif (right === left) {\n\t\twhile (await fn(right)) {\n\t\t\tright *= 2.0;\n\t\t}\n\t}\n\twhile (right - left > 1e-8) {\n\t\tconst middle = (left + right) * 0.5;\n\t\tif (await fn(middle)) {\n\t\t\tleft = middle;\n\t\t} else {\n\t\t\tright = middle;\n\t\t}\n\t}\n\treturn left;\n}\n\nasync function findShaperMaxAccel(shaper: Shaper, scv: number): Promise<number> {\n\tconst maxAccel = await bisect(\n\t\tasync (testAccel: number) => (await getShaperSmoothing(shaper, testAccel, scv)) <= shaperDefaults.TARGET_SMOOTHING,\n\t);\n\treturn maxAccel;\n}\n\nfunction estimateShaper(shaper: Shaper, testDampingRatio: number, testFreqs: Tensor1D): Tensor1D {\n\treturn tidy(() => {\n\t\tconst A = tensor1d(shaper[0]);\n\t\tconst T = tensor1d(shaper[1]);\n\t\tconst invD = div(1, sum(A));\n\t\tconst omega = mul<Tensor1D>(mul<Tensor1D>(testFreqs, 2), Math.PI);\n\t\tconst damping = mul<Tensor1D>(omega, testDampingRatio);\n\t\tconst omegaD = mul<Tensor1D>(omega, Math.sqrt(1 - testDampingRatio ** 2));\n\t\tconst W = mul(A, exp(outerProduct(mul<Tensor1D>(damping, -1), sub<Tensor1D>(slice(T, T.size - 1, 1), T))));\n\t\tconst S = mul(W, sin(outerProduct(omegaD, T)));\n\t\tconst C = mul(W, cos(outerProduct(omegaD, T)));\n\t\treturn mul(sqrt(sum(stack([pow(sum(S, 1), 2), pow(sum(C, 1), 2)]), 0)), invD);\n\t});\n}\n\nasync function estimateRemainingVibrations(\n\tshaper: Shaper,\n\ttestDampingRatio: number,\n\tfreqBins: Tensor1D,\n\tpsd: Tensor1D,\n): Promise<[number, Tensor1D]> {\n\tconst vals = estimateShaper(shaper, testDampingRatio, freqBins);\n\tconst res = (await tidy(() => {\n\t\t// The input shaper can only reduce the amplitude of vibrations by\n\t\t// SHAPER_VIBRATION_REDUCTION times, so all vibrations below that\n\t\t// threshold can be ignored\n\t\tconst vibrThreshold = div(max(psd), shaperDefaults.SHAPER_VIBRATION_REDUCTION);\n\t\tconst remainingVibrations = sum(max(sub(mul(vals, psd), vibrThreshold), 0));\n\t\tconst allVibrations = sum(max(sub(psd, vibrThreshold), 0));\n\t\treturn div(remainingVibrations, allVibrations);\n\t}).array()) as number;\n\treturn [res, vals];\n}\n\nexport type ShaperCalibrationResult = {\n\tname: ShaperModels;\n\tcolor: keyof typeof shadableTWColors;\n\tfreq: number;\n\tvals: number[];\n\tpsd: number[];\n\tvibrs: number;\n\tsmoothing: number;\n\tscore: number;\n\tmaxAccel: number;\n};\n\nconst range = (start: number, stop: number, step: number) =>\n\tArray.from({ length: (stop - start) / step + 1 }, (value, index) => start + index * step);\n\nexport async function fitShaper(\n\tjobId: number,\n\tsignal: AbortSignal,\n\tshaperCfg: InputShaperModel,\n\tcalibrationData: TypedArrayPSD | PSD,\n\t/**\n\t * [start?, end?, step?]\n\t * @type {[number, number, number]}\n\t */\n\tscv: number,\n\tshaperFreqs: [number | null, number | null, number | null] = [null, null, null],\n\tdampingRatio?: number,\n\tmaxSmoothing?: number,\n\ttestDampingRatios?: number[],\n\tmaxFreq?: number,\n\tonProgress?: (model: ShaperModels, progress: number) => void,\n) {\n\tdampingRatio = dampingRatio || shaperDefaults.DEFAULT_DAMPING_RATIO;\n\ttestDampingRatios = testDampingRatios || shaperDefaults.TEST_DAMPING_RATIOS;\n\tconst freqEnd = shaperFreqs[1] ?? shaperDefaults.MAX_SHAPER_FREQ;\n\tconst freqStart = Math.min(shaperFreqs[0] ?? shaperCfg.minFreq, freqEnd - 1e-7);\n\tconst freqStep = shaperFreqs[2] ?? 0.2;\n\tthrowIfCancelled(signal);\n\n\tmaxFreq = Math.max(maxFreq || shaperDefaults.MAX_FREQ, freqEnd);\n\n\tconst freqBins = slice1d(calibrationData.frequencies, 0, calibrationData.frequencies.length);\n\tconst freqBinsFiltered = slice1d(\n\t\tfreqBins,\n\t\t0,\n\t\tcalibrationData.frequencies.findIndex((f) => f > maxFreq),\n\t);\n\tconst psd = slice1d(calibrationData.estimates, 0, freqBins.size);\n\tfreqBins.dispose();\n\tconst zeroArray = zeros([psd.size]);\n\t// Two pass approach, start in 10hz increments, then refine in `freqStep` increments\n\tconst freqsOfInterest = (\n\t\tawait Promise.all(\n\t\t\trange(freqStart, freqEnd, 10).map(async (f) => {\n\t\t\t\tif (shaperCfg.minFreq > f) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst shaper = shaperCfg.initFunc(f, dampingRatio);\n\t\t\t\tlet shaperVibrations = 0;\n\t\t\t\tlet shaperVals = zeroArray.clone();\n\t\t\t\tfor (const dr of testDampingRatios) {\n\t\t\t\t\tconst [vibrations, vals] = await estimateRemainingVibrations(shaper, dr, freqBinsFiltered, psd);\n\t\t\t\t\tthrowIfCancelled(signal);\n\t\t\t\t\tconst oldShapervals = shaperVals;\n\t\t\t\t\tshaperVals = tidy(() => max<Tensor1D>(stack([oldShapervals, vals]), 0));\n\t\t\t\t\toldShapervals.dispose();\n\t\t\t\t\tif (vibrations > shaperVibrations) {\n\t\t\t\t\t\tshaperVibrations = vibrations;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (shaperVibrations < 0.15) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}),\n\t\t)\n\t).filter(Boolean);\n\tthrowIfCancelled(signal);\n\tconst testFrequencies = range(Math.min(...freqsOfInterest), Math.max(...freqsOfInterest), freqStep);\n\tconst progressMap = new Map<number, number>();\n\tconst reportProgress = (index: number, progress: number) => {\n\t\tprogressMap.set(index, progress);\n\t\tconst totalProgress = sumArray(Array.from(progressMap.values())) / testFrequencies.length;\n\t\tpostMessage({ type: 'fitShaperProgress', model: shaperCfg.name, progress: totalProgress, jobId });\n\t\tonProgress?.(shaperCfg.name, totalProgress);\n\t};\n\tconst bestShaper: ShaperCalibrationResult | null = (\n\t\tawait Promise.all(\n\t\t\ttestFrequencies.reverse().map(async (testFreq, index) => {\n\t\t\t\treportProgress(testFreq, 0);\n\t\t\t\tthrowIfCancelled(signal);\n\t\t\t\tlet shaperVibrations = 0;\n\t\t\t\tlet shaperVals = zeroArray.clone();\n\t\t\t\tconst shaper = shaperCfg.initFunc(testFreq, dampingRatio);\n\t\t\t\tconst shaperSmoothing = await getShaperSmoothing(shaper, undefined, scv);\n\t\t\t\tthrowIfCancelled(signal);\n\t\t\t\tif (maxSmoothing && shaperSmoothing > maxSmoothing) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treportProgress(index, 1 / 3);\n\t\t\t\tfor (const dr of testDampingRatios) {\n\t\t\t\t\tconst [vibrations, vals] = await estimateRemainingVibrations(shaper, dr, freqBinsFiltered, psd);\n\t\t\t\t\tthrowIfCancelled(signal);\n\t\t\t\t\tconst oldShapervals = shaperVals;\n\t\t\t\t\tshaperVals = tidy(() => max<Tensor1D>(stack([oldShapervals, vals]), 0));\n\t\t\t\t\toldShapervals.dispose();\n\t\t\t\t\tif (vibrations > shaperVibrations) {\n\t\t\t\t\t\tshaperVibrations = vibrations;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treportProgress(index, 2 / 3);\n\t\t\t\tconst maxAccel = await findShaperMaxAccel(shaper, scv);\n\t\t\t\tthrowIfCancelled(signal);\n\t\t\t\tconst shaperScore = shaperSmoothing * (Math.pow(shaperVibrations, 1.5) + shaperVibrations * 0.2 + 0.01);\n\t\t\t\tconst shaperValsArray = (await shaperVals.array()) as number[];\n\t\t\t\tconst adaptedPsd = (await mul(psd, shaperVals).array()) as number[];\n\t\t\t\treportProgress(index, 3 / 3);\n\t\t\t\tconst result = {\n\t\t\t\t\tname: shaperCfg.name,\n\t\t\t\t\tfreq: testFreq,\n\t\t\t\t\tvals: shaperValsArray,\n\t\t\t\t\tpsd: adaptedPsd,\n\t\t\t\t\tvibrs: shaperVibrations,\n\t\t\t\t\tsmoothing: shaperSmoothing,\n\t\t\t\t\tscore: shaperScore,\n\t\t\t\t\tcolor: shaperCfg.color,\n\t\t\t\t\tmaxAccel: maxAccel,\n\t\t\t\t} satisfies ShaperCalibrationResult;\n\t\t\t\treturn result;\n\t\t\t}),\n\t\t)\n\t).reduce(\n\t\t(selected, res) => {\n\t\t\tif (res === null) {\n\t\t\t\treturn selected;\n\t\t\t}\n\t\t\tif (selected == null || (res.vibrs < selected.vibrs * 1.1 && res.score < selected.score)) {\n\t\t\t\tselected = res;\n\t\t\t}\n\t\t\treturn selected;\n\t\t},\n\t\tnull as ShaperCalibrationResult | null,\n\t);\n\tfreqBinsFiltered.dispose();\n\tpsd.dispose();\n\tzeroArray.dispose();\n\n\tthrowIfCancelled(signal);\n\tpostMessage({ type: 'fitShaper', result: bestShaper, jobId });\n\n\treturn bestShaper;\n}\n\nsetWasmPaths({\n\t'tfjs-backend-wasm.wasm': '/configure/tfjs-backend-wasm.wasm',\n\t'tfjs-backend-wasm-simd.wasm': '/configure/tfjs-backend-wasm-simd.wasm',\n\t'tfjs-backend-wasm-threaded-simd.wasm': '/configure/tfjs-backend-wasm-threaded-simd.wasm',\n});\nexport async function findBestShaper(\n\tjobId: number,\n\tsignal: AbortSignal,\n\tcalibrationData: TypedArrayPSD | PSD,\n\tscv: number,\n\tshapers: InputShaperModel[] = INPUT_SHAPERS,\n\tshaperFreqs?: [number | null, number | null, number | null],\n\tdampingRatio?: number,\n\tmaxSmoothing?: number,\n\ttestDampingRatios?: number[],\n\tmaxFreq?: number,\n) {\n\tawait setBackend('wasm');\n\tthrowIfCancelled(signal);\n\tconst fittedShapers: ShaperCalibrationResult[] = [];\n\tconst totalProgress = new Map<ShaperModels, number>();\n\tshapers.forEach((s) => totalProgress.set(s.name, 0));\n\tpostMessage({ type: 'findBestShaperProgress', progress: 0, jobId });\n\tconst reportProgress = (model: ShaperModels, progress: number) => {\n\t\ttotalProgress.set(model, progress);\n\t\tconst total = sumArray(Array.from(totalProgress.values())) / shapers.length;\n\t\tpostMessage({ type: 'findBestShaperProgress', progress: total, jobId });\n\t};\n\tfor (const shaper of shapers) {\n\t\tconst fittedShaper = await fitShaper(\n\t\t\tjobId,\n\t\t\tsignal,\n\t\t\tshaper,\n\t\t\tcalibrationData,\n\t\t\tscv,\n\t\t\tshaperFreqs,\n\t\t\tdampingRatio,\n\t\t\tmaxSmoothing,\n\t\t\ttestDampingRatios,\n\t\t\tmaxFreq,\n\t\t\treportProgress,\n\t\t);\n\t\tif (fittedShaper) {\n\t\t\tfittedShapers.push(fittedShaper);\n\t\t}\n\t}\n\tthrowIfCancelled(signal);\n\tconst best = fittedShapers.reduce((best, shaper) => {\n\t\t// Either the shaper significantly improves the score (by 20%),\n\t\t// or it improves the score and smoothing (by 5% and 10% resp.)\n\t\tif (\n\t\t\t!best ||\n\t\t\t(shaper && shaper.score * 1.2 < best.score) ||\n\t\t\t(shaper.score * 1.05 < best.score && shaper.smoothing * 1.1 < best.smoothing)\n\t\t) {\n\t\t\tbest = shaper;\n\t\t}\n\t\treturn best;\n\t});\n\treturn {\n\t\tresult: best,\n\t\tshapers: fittedShapers,\n\t};\n}\n\nonmessage = async (e: MessageEvent<InputShaperWorkerInput>) => {\n\tconst command = e.data.type;\n\tswitch (command) {\n\t\tcase 'findBestShaper':\n\t\t\tconst { calibrationData, scv, shaperFreqs, dampingRatio, maxSmoothing, testDampingRatios, maxFreq, id } = e.data;\n\t\t\tconst jobId = id ?? _id++;\n\t\t\tconst abortController = new AbortController();\n\t\t\ttry {\n\t\t\t\tjobs.set(jobId, abortController);\n\t\t\t\tconst result = await findBestShaper(\n\t\t\t\t\tjobId,\n\t\t\t\t\tabortController.signal,\n\t\t\t\t\tcalibrationData,\n\t\t\t\t\tscv,\n\t\t\t\t\tINPUT_SHAPERS,\n\t\t\t\t\tshaperFreqs,\n\t\t\t\t\tdampingRatio,\n\t\t\t\t\tmaxSmoothing,\n\t\t\t\t\ttestDampingRatios,\n\t\t\t\t\tmaxFreq,\n\t\t\t\t);\n\t\t\t\tpostMessage({ type: 'findBestShaper', jobId, ...result } satisfies InputShaperWorkerOutput);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof JobCancelledError) {\n\t\t\t\t\tcancelJob(jobId);\n\t\t\t\t\tpostMessage({ type: 'jobCancelled', id: jobId } satisfies InputShaperWorkerOutput);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'cancelJob':\n\t\t\tcancelJob(e.data.id);\n\t\t\tbreak;\n\t}\n};\n","import { signal as tfSignal, Tensor1D, sum, pow, div, mean, sub, tidy } from '@tensorflow/tfjs-core';\nimport { NumberRange } from 'scichart';\nimport { PSD } from '@/zods/analysis';\nimport { shaperDefaults } from '@/app/analysis/_worker/input-shaper';\n\nexport interface TypedArrayPSD extends Omit<PSD, 'estimates' | 'frequencies'> {\n\testimates: Float64Array;\n\tfrequencies: Float64Array;\n}\n\nexport const detrendSignal = (signal: Tensor1D) => tidy(() => sub<Tensor1D>(signal, mean(signal, 0, true)));\n\nexport const getFFTSize = (sampleRate: number, windowT: number = shaperDefaults.WINDOW_T_SEC): number =>\n\t1 << Math.floor(sampleRate * windowT - 1).toString(2).length;\n\n/**\n * Estimates the power spectral density of a real-valued input signal using the periodogram method and a hann window.\n * Output units are based on that of the input signal, of the form X^2/Hz, where X is the units of the input signal.\n *\n * @memberof module:bcijs\n * @function\n * @name periodogram\n * @param {number[]} signal - The signal.\n * @param {number} sampleRate - sample rate in Hz\n * @param {Object} [options]\n * @param {number} [options.fftSize=1 << nextpow2(sample_rate * WINDOW_T_SEC - 1)] - Size of the fft to be used. Should be a power of 2.\n * @returns {Object} Object with keys 'estimates' (the psd estimates) and 'frequencies' (the corresponding frequencies in Hz)\n */\nexport async function powerSpectralDensity(\n\tsignal: Tensor1D,\n\tsampleRate: number,\n\toptions?: { fftSize?: number; _scaling?: string; isDetrended?: boolean },\n): Promise<TypedArrayPSD> {\n\tlet { fftSize, _scaling } = Object.assign(\n\t\t{\n\t\t\tfftSize: getFFTSize(sampleRate, shaperDefaults.WINDOW_T_SEC),\n\t\t\t_scaling: 'psd',\n\t\t},\n\t\toptions,\n\t);\n\t// Validate _scaling\n\tif (_scaling != 'psd' && _scaling != 'none') {\n\t\tthrow new Error('Unknown scaling');\n\t}\n\n\tlet scalingFactor: number = _scaling === 'none' ? 1 : 2;\n\tconst win = tidy(() => tfSignal.hannWindow(fftSize));\n\tlet windowLossCompensationFactor = (await tidy(() => div(div(1.0, sum(pow(win, 2))), sampleRate)).array()) as number;\n\n\tconst detrended = options?.isDetrended ? signal : detrendSignal(signal);\n\t// await setBackend('webgl');\n\tlet f = tidy(() => tfSignal.stft(detrended, fftSize, Math.floor(fftSize / 2), fftSize, tfSignal.hannWindow));\n\n\tlet x = (await f.array()) as number[][];\n\tf.dispose();\n\tdetrended.dispose();\n\twin.dispose();\n\n\tconst data = x.map((series) => {\n\t\t// Get the power of each FFT bin value\n\t\tlet powers: number[] = [];\n\t\tlet frequencies: number[] = [];\n\t\tlet maxPower = 0;\n\t\tlet minPower = 0;\n\t\tlet skipped = 0;\n\t\tconst fftRatio = sampleRate / fftSize;\n\t\tfor (var i = 0; i < series.length - 1; i += 2) {\n\t\t\tconst frequency = (i === 0 ? 0 : i / 2) * fftRatio;\n\t\t\tif (frequency > shaperDefaults.MAX_FREQ) {\n\t\t\t\tskipped++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst nextFrequency = ((i + 2) / 2) * fftRatio;\n\t\t\t// apply scaling\n\t\t\t// magnitude is sqrt(real^2 + imag^2), power is magnitude^2\n\t\t\tlet power: number = series[i] ** 2 + series[i + 1] ** 2;\n\t\t\tpower *= windowLossCompensationFactor;\n\t\t\t// Don't scale DC or Nyquist by 2\n\t\t\tif (_scaling == 'psd' && i > 0 && nextFrequency < shaperDefaults.MAX_FREQ) {\n\t\t\t\tpower *= scalingFactor;\n\t\t\t}\n\t\t\tif (power > maxPower) {\n\t\t\t\tmaxPower = power;\n\t\t\t}\n\t\t\tif (power < minPower) {\n\t\t\t\tminPower = power;\n\t\t\t}\n\t\t\tpowers.push(power);\n\t\t\tfrequencies.push(frequency);\n\t\t}\n\n\t\treturn {\n\t\t\testimates: powers,\n\t\t\tfrequencies: frequencies,\n\t\t\tpowerRange: new NumberRange(minPower, maxPower),\n\t\t};\n\t});\n\tconst avg = welch(data);\n\treturn avg;\n}\n\nexport class WelchError extends Error {\n\tconstructor(msg: string) {\n\t\tsuper(msg);\n\t\tthis.name = 'WelchError';\n\t}\n}\n\n// Keep this async so that we can potentially move it to the GPU\nexport const welch = async (PSDs: PSD[]): Promise<TypedArrayPSD> => {\n\tif (PSDs.length == 0) throw new WelchError('Unable to calculate any PSD estimates');\n\t// if (PSDs.length == 1) {\n\t// \tgetLogger().warn('Not enough data to compute more than one segment, returning single modified periodogram.');\n\t// \treturn PSDs[0];\n\t// }\n\n\t// Compute average PSD\n\tlet numEstimates = PSDs[0].estimates.length;\n\tlet avg = new Float64Array(numEstimates).fill(0);\n\tfor (let p = 0; p < PSDs.length; p++) {\n\t\tfor (let i = 0; i < numEstimates; i++) {\n\t\t\tavg[i] += PSDs[p].estimates[i];\n\t\t}\n\t}\n\tlet maxPower = 0;\n\tlet minPower = 0;\n\tfor (let i = 0; i < numEstimates; i++) {\n\t\tavg[i] = avg[i] / PSDs.length;\n\t\tif (avg[i] > maxPower) {\n\t\t\tmaxPower = avg[i];\n\t\t}\n\t\tif (avg[i] < minPower) {\n\t\t\tminPower = avg[i];\n\t\t}\n\t}\n\n\treturn {\n\t\testimates: avg,\n\t\tfrequencies: Float64Array.from(PSDs[0].frequencies),\n\t\tpowerRange: new NumberRange(minPower, maxPower),\n\t};\n};\n\nexport const sumPSDs = (PSDs: TypedArrayPSD[]): TypedArrayPSD => {\n\tlet numEstimates = PSDs[0].estimates.length;\n\tlet sum = new Float64Array(numEstimates).fill(0);\n\tfor (let p = 0; p < PSDs.length; p++) {\n\t\tfor (let i = 0; i < numEstimates; i++) {\n\t\t\tsum[i] += PSDs[p].estimates[i];\n\t\t}\n\t}\n\treturn {\n\t\testimates: sum,\n\t\tfrequencies: Float64Array.from(PSDs[0].frequencies),\n\t\tpowerRange: new NumberRange(Math.min(...sum), Math.max(...sum)),\n\t};\n};\n","import { scan, pipe, filter, Observable, UnaryFunction } from 'rxjs';\n\nexport const bufferFifo = <T>(bufferSize: number): UnaryFunction<Observable<T>, Observable<T[]>> =>\n\tpipe(\n\t\tscan((acc, input: T) => {\n\t\t\tconst buffer = [...acc, input].slice(-bufferSize);\n\t\t\treturn buffer;\n\t\t}, [] as T[]),\n\t\tfilter((buffer) => buffer.length >= bufferSize),\n\t);\n","import { LoggerOptions } from 'pino';\n\nexport const globalPinoOpts: LoggerOptions = {\n\ttimestamp: true,\n\tlevel: process.env.NODE_ENV === 'development' ? 'debug' : 'info',\n};\n","'use client';\nimport { createTRPCProxyClient, httpBatchLink } from '@trpc/client';\nimport { createTRPCNext } from '@trpc/next';\nimport type { AppRouter } from '@/server/routers/index';\nexport type {\n\tPrinterRouterLike,\n\tDropdownQuery,\n\tDropdownQueryKeys,\n\tDropdownQueryInput,\n\tDropdownQueryOutput,\n} from '@/server/routers/printer';\n\nexport function getBaseUrl() {\n\tif (typeof window !== 'undefined')\n\t\t// browser should use relative path\n\t\treturn '/configure';\n\tif (process.env.RENDER_INTERNAL_HOSTNAME)\n\t\t// reference for render.com\n\t\treturn `http://${process.env.RENDER_INTERNAL_HOSTNAME}:${process.env.PORT}/configure`;\n\t// assume localhost\n\treturn `http://127.0.0.1:${process.env.PORT ?? 3000}/configure`;\n}\nexport const trpc = createTRPCNext<AppRouter>({\n\tconfig() {\n\t\treturn {\n\t\t\tlinks: [\n\t\t\t\thttpBatchLink({\n\t\t\t\t\t/**\n\t\t\t\t\t * @link https://trpc.io/docs/ssr\n\t\t\t\t\t **/\n\t\t\t\t\turl: `${getBaseUrl()}/api/trpc`,\n\t\t\t\t\tmaxURLLength: 2083, // a suitable size\n\t\t\t\t}),\n\t\t\t],\n\t\t};\n\t},\n\toverrides: {\n\t\tuseMutation: {\n\t\t\t/**\n\t\t\t * This function is called whenever a `.useMutation` succeeds\n\t\t\t **/\n\t\t\tasync onSuccess(opts) {\n\t\t\t\t/**\n\t\t\t\t * @note that order here matters:\n\t\t\t\t * The order here allows route changes in `onSuccess` without\n\t\t\t\t * having a flash of content change whilst redirecting.\n\t\t\t\t **/\n\t\t\t\t// Calls the `onSuccess` defined in the `useQuery()`-options:\n\t\t\t\tawait opts.originalFn();\n\t\t\t\t// Invalidate all queries in the react-query cache:\n\t\t\t\tawait opts.queryClient.invalidateQueries();\n\t\t\t},\n\t\t},\n\t},\n\t/**\n\t * @link https://trpc.io/docs/ssr\n\t **/\n\tssr: false,\n});\nexport const proxyClient = createTRPCProxyClient<AppRouter>({\n\tlinks: [\n\t\thttpBatchLink({\n\t\t\t/**\n\t\t\t * @link https://trpc.io/docs/ssr\n\t\t\t **/\n\t\t\turl: `${getBaseUrl()}/api/trpc`,\n\t\t\tmaxURLLength: 2083, // a suitable size\n\t\t}),\n\t],\n});\n","import { proxyClient, trpc } from '@/utils/trpc';\nexport { trpc, proxyClient as trpcClient };\n","import { z } from 'zod';\n\nexport const PinoLogLevel = z.enum(['trace', 'debug', 'info', 'warn', 'error', 'fatal']);\n\nexport const PinoLogEvent = z.object({\n\tts: z.number(),\n\tmessages: z.array(z.any()),\n\tbindings: z.array(z.record(z.string(), z.any())),\n\tlevel: z.object({\n\t\tlabel: PinoLogLevel,\n\t\tvalue: z.number(),\n\t}),\n});\n","import pino from 'pino';\nimport { globalPinoOpts } from '@/helpers/logger';\nimport { trpcClient } from '@/helpers/trpc';\nimport { PinoLogEvent } from '@/zods/util';\nimport { prettyFactory, write } from 'pino-pretty-browser';\n\nconst send = async function (level: pino.Level, logEvent: pino.LogEvent) {\n\ttrpcClient.clientLog.mutate({ level, logEvent: PinoLogEvent.parse(logEvent) });\n};\n\nlet logger: pino.Logger | null = null;\nexport const getLogger = () => {\n\tif (logger != null) {\n\t\treturn logger;\n\t}\n\tlogger = pino({\n\t\t...globalPinoOpts,\n\t\tbrowser: {\n\t\t\ttransmit: {\n\t\t\t\tsend,\n\t\t\t},\n\t\t},\n\t});\n\treturn logger;\n};\n","import {\n\tObservable,\n\tswitchMap,\n\tswitchScan,\n\tscan,\n\tthrottle,\n\tSubject,\n\tmap,\n\tfrom,\n\tconcatMap,\n\tdistinctUntilChanged,\n\tfilter,\n\tmergeMap,\n\tof,\n\tshareReplay,\n\tEMPTY,\n\tmerge,\n\tasyncScheduler,\n\tscheduled,\n\tfirstValueFrom,\n\ttap,\n\tmergeAll,\n} from 'rxjs';\nimport { AccelSampleMs } from '@/app/analysis/_worker/processing';\nimport { TypedArrayPSD, WelchError, powerSpectralDensity, sumPSDs } from '@/app/analysis/periodogram';\nimport {\n\tRank,\n\tTensor2D,\n\tbackend,\n\tdisposeVariables,\n\tgetBackend,\n\tready,\n\treshape,\n\tsetBackend,\n\tsplit,\n\ttensor2d,\n\ttidy,\n\tenv,\n} from '@tensorflow/tfjs-core';\nimport BigNumber from 'bignumber.js';\nimport { DoWork, runWorker } from 'observable-webworker';\nimport { bufferFifo } from '@/app/analysis/_worker/stream-utils';\nimport { getLogger } from '@/app/_helpers/logger';\nimport type { WebGPUBackend } from '@tensorflow/tfjs-backend-webgpu';\nimport type { MathBackendWebGL } from '@tensorflow/tfjs-backend-webgl';\n\nexport type PSDResult = {\n\tx: TypedArrayPSD;\n\ty: TypedArrayPSD;\n\tz: TypedArrayPSD;\n\ttotal: TypedArrayPSD;\n\t// source?: Float64Array[];\n};\n\nexport function isWebGPUSupported(): boolean {\n\treturn !!(typeof globalThis !== 'undefined' && globalThis.navigator && globalThis.navigator.gpu);\n}\nlet loaded = false;\nexport async function loadTFJS() {\n\tif (loaded) {\n\t\treturn true;\n\t}\n\tif (!isWebGPUSupported()) {\n\t\tgetLogger().info('WebGPU not available, falling back to WebGL');\n\t\tawait import('@tensorflow/tfjs-backend-webgl');\n\t\tawait setBackend('webgl');\n\t\tgetLogger().info('WebGL backend loaded');\n\t} else {\n\t\ttry {\n\t\t\tgetLogger().info('Loading webgpu backend');\n\t\t\tconst tf = await import('@tensorflow/tfjs-backend-webgpu');\n\t\t\tawait setBackend('webgpu');\n\t\t\tenv().set('WEBGPU_CPU_FORWARD', false);\n\t\t\tgetLogger().info('WebGPU backend loaded');\n\t\t} catch (e) {\n\t\t\tgetLogger().error(e, 'Failed to load webgpu backend, falling back to webgl');\n\t\t\tawait import('@tensorflow/tfjs-backend-webgl');\n\t\t\tawait setBackend('webgl');\n\t\t}\n\t}\n\tawait ready();\n\tloaded = true;\n}\n\nconst runPSD = async (samples: AccelSampleMs[]): Promise<PSDResult | null> => {\n\tawait ready();\n\tconst sampleRate = new BigNumber(samples.length)\n\t\t.div(new BigNumber(samples[samples.length - 1][0]).minus(samples[0][0]).shiftedBy(-3))\n\t\t.shiftedBy(-1)\n\t\t.decimalPlaces(0, BigNumber.ROUND_HALF_DOWN) // Round to closest 10's of Hz\n\t\t.shiftedBy(1)\n\t\t.toNumber();\n\tconst tensors = tidy(() => {\n\t\tconst signal = tensor2d(samples.map((s) => [s[1], s[2], s[3]]));\n\t\tconst [x2d, y2d, z2d] = split<Tensor2D>(signal, 3, 1);\n\t\tconst x = reshape<Rank.R1>(x2d, [x2d.shape[0]]);\n\t\tconst y = reshape<Rank.R1>(y2d, [y2d.shape[0]]);\n\t\tconst z = reshape<Rank.R1>(z2d, [z2d.shape[0]]);\n\t\treturn { x, y, z };\n\t});\n\ttry {\n\t\tconst [xPsd, yPsd, zPsd] = await Promise.all([\n\t\t\tpowerSpectralDensity(tensors.x, sampleRate, { isDetrended: true }),\n\t\t\tpowerSpectralDensity(tensors.y, sampleRate, { isDetrended: true }),\n\t\t\tpowerSpectralDensity(tensors.z, sampleRate, { isDetrended: true }),\n\t\t]);\n\t\tObject.values(tensors).forEach((t) => {\n\t\t\tt.dispose();\n\t\t});\n\t\tif (getBackend() === 'webgpu') {\n\t\t\t// Force cleanup of memory because tfjs sucks balls at memory management.\n\t\t\tconst tf = backend() as WebGPUBackend;\n\t\t\ttf.bufferManager.dispose();\n\t\t} else if (getBackend() === 'webgl') {\n\t\t\t// Force cleanup of memory because tfjs sucks balls at memory management.\n\t\t\tconst tf = backend() as MathBackendWebGL;\n\t\t\tconst textureManager = tf.getTextureManager();\n\t\t\ttextureManager.dispose();\n\t\t\t// I can't fucking believe it..\n\t\t\t(textureManager as any).freeTextures = {};\n\t\t\t(textureManager as any).usedTextures = {};\n\t\t}\n\t\treturn {\n\t\t\tx: xPsd,\n\t\t\ty: yPsd,\n\t\t\tz: zPsd,\n\t\t\ttotal: sumPSDs([xPsd, yPsd, zPsd]),\n\t\t};\n\t} catch (e) {\n\t\tif (e instanceof WelchError) {\n\t\t\treturn null;\n\t\t}\n\t\tthrow e;\n\t}\n};\n\nexport type AccumulateAndCallback = false | ((psd: Awaited<ReturnType<typeof runPSD>>) => void);\n\nconst createPSDProcessor = async (\n\tsignal$: Observable<AccelSampleMs>,\n\tspecSampleRate$: Observable<number>,\n\taccumulation$: Observable<AccumulateAndCallback>,\n) => {\n\tconst psdProcess = new Subject();\n\tconst psdProcess$ = psdProcess.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tpsdProcess$.subscribe();\n\tlet first = true;\n\tif (typeof window !== 'undefined') {\n\t\tawait loadTFJS();\n\t}\n\treturn accumulation$.pipe(\n\t\tdistinctUntilChanged(),\n\t\tswitchScan(\n\t\t\t(acc, accumulate) => {\n\t\t\t\tif (accumulate) {\n\t\t\t\t\treturn signal$.pipe(\n\t\t\t\t\t\tscan((sampleAcc, sample) => {\n\t\t\t\t\t\t\tsampleAcc.push(sample);\n\t\t\t\t\t\t\treturn sampleAcc;\n\t\t\t\t\t\t}, [] as AccelSampleMs[]),\n\t\t\t\t\t\tfilter((samples) => samples.length > 3200),\n\t\t\t\t\t\tmap((samples) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tsamples,\n\t\t\t\t\t\t\t\tonAccumulationComplete: accumulate,\n\t\t\t\t\t\t\t\taccumulationComplete: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (!accumulate && acc.onAccumulationComplete) {\n\t\t\t\t\tacc.accumulationComplete = true;\n\t\t\t\t\treturn of(acc);\n\t\t\t\t}\n\t\t\t\t// Don't accumulate\n\t\t\t\treturn specSampleRate$.pipe(\n\t\t\t\t\tswitchMap((sampleRate) => {\n\t\t\t\t\t\treturn signal$.pipe(bufferFifo(sampleRate)); // Returns the last count(sampleRate) samples each time there's a new sample.\n\t\t\t\t\t}),\n\t\t\t\t\tmap((samples) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsamples,\n\t\t\t\t\t\t\tonAccumulationComplete: false,\n\t\t\t\t\t\t\taccumulationComplete: false,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tsamples: [] as AccelSampleMs[],\n\t\t\t\tonAccumulationComplete: false as AccumulateAndCallback,\n\t\t\t\taccumulationComplete: false,\n\t\t\t},\n\t\t),\n\t\tthrottle(() => psdProcess$, { leading: first, trailing: true }),\n\t\tconcatMap((input) => {\n\t\t\tconst { samples, onAccumulationComplete, accumulationComplete } = input;\n\t\t\tif (first) {\n\t\t\t\tfirst = false;\n\t\t\t}\n\t\t\treturn scheduled(\n\t\t\t\tfrom(\n\t\t\t\t\trunPSD(samples).then((psd) => {\n\t\t\t\t\t\tif (accumulationComplete && typeof onAccumulationComplete === 'function') {\n\t\t\t\t\t\t\tgetLogger().info('Accumulation completed, psd was run on ' + samples.length + ' samples');\n\t\t\t\t\t\t\tonAccumulationComplete(psd);\n\t\t\t\t\t\t\tpsdProcess.next({});\n\t\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (psd == null) {\n\t\t\t\t\t\t\tpsdProcess.next({});\n\t\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpsdProcess.next({}); // Allow the next batch of samples through.\n\t\t\t\t\t\treturn of(psd);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t\tasyncScheduler,\n\t\t\t).pipe(mergeAll());\n\t\t}),\n\t);\n};\n\nexport type PSDWorkerInput =\n\t| {\n\t\t\tcommand: 'sampleInput';\n\t\t\tpayload: AccelSampleMs;\n\t  }\n\t| {\n\t\t\tcommand: 'specSampleRateInput';\n\t\t\tpayload: number;\n\t  }\n\t| {\n\t\t\tcommand: 'accumulate';\n\t\t\tpayload: boolean;\n\t  };\nexport type PSDWorkerOutput =\n\t| {\n\t\t\ttype: 'accumulation_finished';\n\t\t\tpsd: PSDResult;\n\t  }\n\t| {\n\t\t\ttype: 'accumulation_started';\n\t  }\n\t| {\n\t\t\ttype: 'psd';\n\t\t\tpsd: PSDResult;\n\t  };\nexport class PSDWorker implements DoWork<PSDWorkerInput, PSDWorkerOutput> {\n\tprivate isAccumulating = false;\n\tprivate processor: ReturnType<typeof createPSDProcessor> | null = null;\n\tprivate signalPassThroughSubject = new Subject<AccelSampleMs>();\n\tprivate signalPassThrough$: Observable<AccelSampleMs> = this.signalPassThroughSubject.asObservable();\n\tprivate sampleRatePassThroughSubject = new Subject<number>();\n\tprivate sampleRatePassThrough$: Observable<number> = this.sampleRatePassThroughSubject\n\t\t.asObservable()\n\t\t.pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tprivate accumulationSubject = new Subject<AccumulateAndCallback>();\n\tprivate accumulation$ = this.accumulationSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\tpublic constructor() {\n\t\tthis.signalPassThroughSubject = new Subject<AccelSampleMs>();\n\t\tthis.signalPassThrough$ = this.signalPassThroughSubject.asObservable();\n\t\tthis.sampleRatePassThroughSubject = new Subject<number>();\n\t\tthis.sampleRatePassThrough$ = this.sampleRatePassThroughSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\t\tthis.sampleRatePassThrough$.subscribe();\n\t\tthis.accumulationSubject = new Subject<AccumulateAndCallback>();\n\t\tthis.accumulation$ = this.accumulationSubject.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: false }));\n\t}\n\tpublic work(input$: Observable<PSDWorkerInput>) {\n\t\treturn input$.pipe(\n\t\t\tmergeMap((input): Observable<PSDWorkerOutput> => {\n\t\t\t\tswitch (input.command) {\n\t\t\t\t\tcase 'accumulate': {\n\t\t\t\t\t\tif (!this.isAccumulating && input.payload === true) {\n\t\t\t\t\t\t\tgetLogger().info('PSD Worker Command: Starting accumulation');\n\t\t\t\t\t\t\tthis.isAccumulating = true;\n\t\t\t\t\t\t\treturn merge(\n\t\t\t\t\t\t\t\tof({\n\t\t\t\t\t\t\t\t\ttype: `accumulation_started` as const,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tscheduled(\n\t\t\t\t\t\t\t\t\tfrom(\n\t\t\t\t\t\t\t\t\t\tnew Promise<PSDResult>((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.accumulationSubject.next((val) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (val == null) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treject('Accumulation failed');\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tresolve(val);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t).pipe(\n\t\t\t\t\t\t\t\t\t\tmap((result) => {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: `accumulation_finished` as const,\n\t\t\t\t\t\t\t\t\t\t\t\tpsd: result,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tasyncScheduler,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.isAccumulating = false;\n\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t\t// psdProcess.next({}); // this may still be necessary\n\t\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcase 'sampleInput': {\n\t\t\t\t\t\tthis.signalPassThroughSubject.next(input.payload);\n\t\t\t\t\t\tif (this.processor == null) {\n\t\t\t\t\t\t\tthis.processor = createPSDProcessor(\n\t\t\t\t\t\t\t\tthis.signalPassThrough$,\n\t\t\t\t\t\t\t\tthis.sampleRatePassThrough$,\n\t\t\t\t\t\t\t\tthis.accumulation$,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst stream = from(this.processor).pipe(\n\t\t\t\t\t\t\t\tmergeMap((proc) =>\n\t\t\t\t\t\t\t\t\tproc.pipe(\n\t\t\t\t\t\t\t\t\t\tmap(\n\t\t\t\t\t\t\t\t\t\t\t(psd) =>\n\t\t\t\t\t\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'psd',\n\t\t\t\t\t\t\t\t\t\t\t\t\tpsd,\n\t\t\t\t\t\t\t\t\t\t\t\t}) as {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'psd';\n\t\t\t\t\t\t\t\t\t\t\t\t\tpsd: PSDResult;\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\tshareReplay({ bufferSize: 1, refCount: false }),\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfirstValueFrom(from(this.processor)).then(() => {\n\t\t\t\t\t\t\t\tif (!this.isAccumulating) {\n\t\t\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn stream;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'specSampleRateInput': {\n\t\t\t\t\t\tif (!this.isAccumulating) {\n\t\t\t\t\t\t\tthis.accumulationSubject.next(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.sampleRatePassThroughSubject.next(input.payload);\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treturn EMPTY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\tpublic selectTransferables(output: PSDWorkerOutput): Transferable[] {\n\t\tswitch (output.type) {\n\t\t\tcase 'psd': {\n\t\t\t\treturn [\n\t\t\t\t\toutput.psd.x.estimates.buffer,\n\t\t\t\t\toutput.psd.x.frequencies.buffer,\n\t\t\t\t\toutput.psd.y.estimates.buffer,\n\t\t\t\t\toutput.psd.y.frequencies.buffer,\n\t\t\t\t\toutput.psd.z.estimates.buffer,\n\t\t\t\t\toutput.psd.z.frequencies.buffer,\n\t\t\t\t\toutput.psd.total.estimates.buffer,\n\t\t\t\t\toutput.psd.total.frequencies.buffer,\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase 'accumulation_finished': {\n\t\t\t\treturn [\n\t\t\t\t\toutput.psd.x.estimates.buffer,\n\t\t\t\t\toutput.psd.x.frequencies.buffer,\n\t\t\t\t\toutput.psd.y.estimates.buffer,\n\t\t\t\t\toutput.psd.y.frequencies.buffer,\n\t\t\t\t\toutput.psd.z.estimates.buffer,\n\t\t\t\t\toutput.psd.z.frequencies.buffer,\n\t\t\t\t\toutput.psd.total.estimates.buffer,\n\t\t\t\t\toutput.psd.total.frequencies.buffer,\n\t\t\t\t];\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n}\n\nrunWorker(PSDWorker);\n","'use client';\n/**\n * Adapted from Dmitry Butyugin <dmbutyugin@google.com> input shaper code in Klipper.\n * This file may be distributed under the terms of the GNU GPLv3 license.\n */\nimport { shaperDefaults } from '@/app/analysis/_worker/input-shaper';\nimport { shadableTWColors } from '@/app/_helpers/colors';\n\nexport type Shaper = [number[], number[]];\n\nexport type ShaperModels = 'zv' | 'mzv' | 'zvd' | 'ei' | '2hump_ei' | '3hump_ei';\n\nexport type InputShaperModel = {\n\tminFreq: number;\n\tinitFunc: (shaperFrequency: number, dampingRatio: number) => Shaper;\n\tname: ShaperModels;\n\tcolor: keyof typeof shadableTWColors;\n};\n\nexport function inputShaperCfg(\n\tname: ShaperModels,\n\tinitFunc: (shaperFrequency: number, dampingRatio: number) => Shaper,\n\tminFreq: number,\n\tcolor: keyof typeof shadableTWColors,\n): InputShaperModel {\n\treturn { name, initFunc, minFreq, color };\n}\n\nexport function getNoneShaper(): Shaper {\n\treturn [[], []];\n}\n\nexport function getZvShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\tconst A = [1, K];\n\tconst T = [0, 0.5 * tD];\n\treturn [A, T];\n}\n\nexport function getZvdShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\tconst A = [1, 2 * K, K ** 2];\n\tconst T = [0, 0.5 * tD, tD];\n\treturn [A, T];\n}\n\nexport function getMzvShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-0.75 * dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\n\tconst a1 = 1 - 1 / Math.sqrt(2);\n\tconst a2 = (Math.sqrt(2) - 1) * K;\n\tconst a3 = a1 * K * K;\n\n\tconst A = [a1, a2, a3];\n\tconst T = [0, 0.375 * tD, 0.75 * tD];\n\treturn [A, T];\n}\n\nexport function getEiShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst vTol = 1 / shaperDefaults.SHAPER_VIBRATION_REDUCTION; // vibration tolerance\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\n\tconst a1 = 0.25 * (1 + vTol);\n\tconst a2 = 0.5 * (1 - vTol) * K;\n\tconst a3 = a1 * K * K;\n\n\tconst A = [a1, a2, a3];\n\tconst T = [0, 0.5 * tD, tD];\n\treturn [A, T];\n}\n\nexport function get2HumpEiShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst vTol = 1 / shaperDefaults.SHAPER_VIBRATION_REDUCTION; // vibration tolerance\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\n\tconst V2 = vTol ** 2;\n\tconst X = Math.pow(V2 * (Math.sqrt(1 - V2) + 1), 1 / 3);\n\tconst a1 = (3 * X * X + 2 * X + 3 * V2) / (16 * X);\n\tconst a2 = (0.5 - a1) * K;\n\tconst a3 = a2 * K;\n\tconst a4 = a1 * K * K * K;\n\n\tconst A = [a1, a2, a3, a4];\n\tconst T = [0, 0.5 * tD, tD, 1.5 * tD];\n\treturn [A, T];\n}\n\nexport function get3HumpEiShaper(shaperFreq: number, dampingRatio: number): Shaper {\n\tconst vTol = 1 / shaperDefaults.SHAPER_VIBRATION_REDUCTION; // vibration tolerance\n\tconst df = Math.sqrt(1 - dampingRatio ** 2);\n\tconst K = Math.exp((-dampingRatio * Math.PI) / df);\n\tconst tD = 1 / (shaperFreq * df);\n\n\tconst K2 = K * K;\n\tconst a1 = 0.0625 * (1 + 3 * vTol + 2 * Math.sqrt(2 * (vTol + 1) * vTol));\n\tconst a2 = 0.25 * (1 - vTol) * K;\n\tconst a3 = (0.5 * (1 + vTol) - 2 * a1) * K2;\n\tconst a4 = a2 * K2;\n\tconst a5 = a1 * K2 * K2;\n\n\tconst A = [a1, a2, a3, a4, a5];\n\tconst T = [0, 0.5 * tD, tD, 1.5 * tD, 2 * tD];\n\treturn [A, T];\n}\n\nexport const INPUT_SHAPERS = [\n\tinputShaperCfg('zv', getZvShaper, 21, 'blue'),\n\tinputShaperCfg('mzv', getMzvShaper, 23, 'rose'),\n\tinputShaperCfg('zvd', getZvdShaper, 29, 'lime'),\n\tinputShaperCfg('ei', getEiShaper, 29, 'amber'),\n\tinputShaperCfg('2hump_ei', get2HumpEiShaper, 39, 'pink'),\n\tinputShaperCfg('3hump_ei', get3HumpEiShaper, 48, 'violet'),\n];\n","export const sumArray = (arr: number[]) => arr.reduce((a, b) => a + b, 0);\nexport const meanArray = (arr: number[]) => sumArray(arr) / arr.length;\nexport const maxArrayIndex = (arr: number[]) => arr.reduce((iMax, x, i, arr) => (x > arr[iMax] ? i : iMax), 0);\n\nexport function pearsonCorrelation(x: number[], y: number[]): number {\n\tif (x.length !== y.length) {\n\t\tthrow new Error('Input arrays must have the same length.');\n\t}\n\n\tconst n = x.length;\n\tconst meanX = meanArray(x);\n\tconst meanY = meanArray(y);\n\n\tlet numerator = 0;\n\tlet denominatorX = 0;\n\tlet denominatorY = 0;\n\n\tfor (let i = 0; i < n; i++) {\n\t\tconst dx = x[i] - meanX;\n\t\tconst dy = y[i] - meanY;\n\t\tnumerator += dx * dy;\n\t\tdenominatorX += dx * dx;\n\t\tdenominatorY += dy * dy;\n\t}\n\n\tconst denominator = Math.sqrt(denominatorX) * Math.sqrt(denominatorY);\n\tif (denominator === 0) {\n\t\treturn 0; // Avoid division by zero\n\t}\n\n\treturn numerator / denominator;\n}\n\nexport function calculatePercentile(arr: number[], percentile: number): number {\n\tarr.sort((a, b) => a - b);\n\tconst index = (percentile / 100) * (arr.length - 1);\n\tconst lower = Math.floor(index);\n\tconst upper = Math.ceil(index);\n\tif (lower === upper) {\n\t\treturn arr[lower];\n\t}\n\treturn arr[lower] + (arr[upper] - arr[lower]) * (index - lower);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5809,8602,2401,966,1880,9583,8693,3111], function() { return __webpack_require__(60840); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames not based on template\n\tif (chunkId === 3692) return \"static/chunks/3692.ffafe43b788f421f.js\";\n\tif (chunkId === 7522) return \"static/chunks/f596963f.28440e48f6686c7f.js\";\n\tif (chunkId === 6026) return \"static/chunks/7bd3d363.ad100946069368dc.js\";\n\tif (chunkId === 297) return \"static/chunks/297.0a7bfa23870b50a6.js\";\n\tif (chunkId === 7562) return \"static/chunks/7562.72e012a08b449aba.js\";\n\tif (chunkId === 726) return \"static/chunks/726.33386206929ecf4c.js\";\n\tif (chunkId === 3111) return \"static/chunks/3111.afcc82b444874fe6.js\";\n\t// return url for filenames based on template\n\treturn \"static/chunks/\" + ({\"2401\":\"b23207f8\",\"5809\":\"d79b9594\",\"8602\":\"cf1218bd\",\"9321\":\"fa86fe2e\"}[chunkId] || chunkId) + \"-\" + {\"966\":\"bbd3d7023d7429a5\",\"1880\":\"e37041295ac7e434\",\"2401\":\"37b4ad4627577012\",\"5809\":\"495c0e1ec22a8cae\",\"8602\":\"3ec3b7c51d8a2a00\",\"8693\":\"952e400a4dbea8cc\",\"9321\":\"e962572a02b89204\",\"9583\":\"c452f2e23409b782\"}[chunkId] + \".js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var policy;\n__webpack_require__.tt = function() {\n\t// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\n\tif (policy === undefined) {\n\t\tpolicy = {\n\t\t\tcreateScriptURL: function(url) { return url; }\n\t\t};\n\t\tif (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {\n\t\t\tpolicy = trustedTypes.createPolicy(\"nextjs#bundler\", policy);\n\t\t}\n\t}\n\treturn policy;\n};","__webpack_require__.tu = function(url) { return __webpack_require__.tt().createScriptURL(url); };","__webpack_require__.p = \"/configure/_next/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t8108: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.u(chunkId)));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([5809,8602,2401,966,1880,9583,8693,3111].map(__webpack_require__.e, __webpack_require__)).then(next);\n};",null,"// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","leafPrototypes","getProto","policy","installedChunks","chunkLoadingGlobal","parentChunkLoadingFunction","next","JobCancelledError","Error","constructor","jobs","Map","_id","shaperDefaults","DEFAULT_DAMPING_RATIO","SHAPER_VIBRATION_REDUCTION","TEST_DAMPING_RATIOS","MAX_SHAPER_FREQ","WINDOW_T_SEC","MIN_FREQ","MAX_FREQ","TARGET_SMOOTHING","cancelJob","controller","get","id","signal","aborted","abort","delete","throwIfCancelled","getShaperSmoothing","shaper","accel","scv","halfAccel","A","T","invD","sumArray","n","length","ts","map","a","i","offset90","offset180","Math","max","sqrt","bisect","fn","left","right","middle","findShaperMaxAccel","maxAccel","testAccel","estimateRemainingVibrations","testDampingRatio","freqBins","psd","vals","tidy","tensor1d","div","sum","omega","mul","PI","damping","omegaD","W","exp","outerProduct","sub","slice","size","S","sin","C","cos","stack","pow","res","vibrThreshold","remainingVibrations","allVibrations","array","range","start","stop","step","Array","from","value","index","fitShaper","jobId","shaperCfg","calibrationData","shaperFreqs","dampingRatio","maxSmoothing","testDampingRatios","maxFreq","onProgress","freqEnd","freqStart","min","minFreq","freqStep","slice1d","frequencies","freqBinsFiltered","findIndex","f","estimates","dispose","zeroArray","zeros","freqsOfInterest","Promise","all","initFunc","shaperVibrations","shaperVals","clone","dr","vibrations","oldShapervals","filter","Boolean","testFrequencies","progressMap","reportProgress","progress","set","totalProgress","values","postMessage","type","model","name","bestShaper","reverse","testFreq","shaperSmoothing","undefined","shaperScore","shaperValsArray","adaptedPsd","result","freq","vibrs","smoothing","score","color","reduce","selected","findBestShaper","shapers","INPUT_SHAPERS","setBackend","fittedShapers","forEach","s","total","fittedShaper","push","best","setWasmPaths","onmessage","e","command","data","abortController","AbortController","detrendSignal","mean","getFFTSize","sampleRate","windowT","floor","toString","powerSpectralDensity","options","fftSize","_scaling","Object","assign","scalingFactor","win","tfSignal","hannWindow","windowLossCompensationFactor","detrended","isDetrended","stft","x","powers","maxPower","minPower","fftRatio","series","frequency","nextFrequency","power","powerRange","NumberRange","avg","welch","WelchError","msg","PSDs","numEstimates","Float64Array","fill","p","sumPSDs","bufferFifo","pipe","scan","acc","input","buffer","bufferSize","globalPinoOpts","timestamp","level","getBaseUrl","createTRPCNext","config","links","httpBatchLink","url","concat","maxURLLength","overrides","useMutation","onSuccess","opts","originalFn","queryClient","invalidateQueries","ssr","proxyClient","createTRPCProxyClient","PinoLogLevel","z","enum","PinoLogEvent","object","number","messages","any","bindings","record","string","label","send","logEvent","trpcClient","clientLog","mutate","parse","logger","getLogger","pino","browser","transmit","loaded","loadTFJS","globalThis","navigator","gpu","info","__webpack_require__","then","bind","env","error","ready","runPSD","samples","BigNumber","minus","shiftedBy","decimalPlaces","ROUND_HALF_DOWN","toNumber","tensors","tensor2d","x2d","y2d","z2d","split","reshape","shape","y","xPsd","yPsd","zPsd","t","getBackend","tf","backend","bufferManager","textureManager","getTextureManager","freeTextures","usedTextures","createPSDProcessor","signal$","specSampleRate$","accumulation$","psdProcess","Subject","psdProcess$","asObservable","shareReplay","refCount","subscribe","first","distinctUntilChanged","switchScan","accumulate","sampleAcc","sample","onAccumulationComplete","accumulationComplete","of","switchMap","throttle","leading","trailing","concatMap","scheduled","EMPTY","asyncScheduler","mergeAll","runWorker","work","input$","mergeMap","isAccumulating","payload","merge","resolve","reject","accumulationSubject","val","signalPassThroughSubject","processor","signalPassThrough$","sampleRatePassThrough$","stream","proc","firstValueFrom","sampleRatePassThroughSubject","selectTransferables","output","inputShaperCfg","shaperFreq","df","K","tD","a1","vTol","V2","X","a2","K2","arr","b","__webpack_module_cache__","moduleId","cachedModule","exports","module","threw","__webpack_modules__","call","m","__webpack_exports__","O","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","keys","every","key","splice","r","getter","__esModule","d","getPrototypeOf","obj","__proto__","mode","ns","create","def","current","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","chunkId","promises","u","miniCssF","g","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","tt","createScriptURL","trustedTypes","createPolicy","tu","importScripts","self","moreModules","runtime","pop"],"sourceRoot":""}