{"version":3,"file":"static/chunks/3790-ddc1c2523886a0d3.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/frameloop/render-step.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/frameloop/batcher.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/frameloop/frame.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/frameloop/sync-time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/LazyContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/frameloop/microtask.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/definitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/load-features.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/resolve-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/utils/make-none-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/memo.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/utils/can-animate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/default.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/debug/record.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/array.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/clamp.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/errors.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/interpolate.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/is-browser.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/color.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/visibility.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/complex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/mix/number.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/noop.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/pipe.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/progress.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hex.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/color/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/complex/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/types/utils.mjs","webpack://_N_E/./node_modules/.pnpm/framer-motion@11.2.6_@emotion+is-prop-valid@0.8.8_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                    callback(frameData);\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"read\", // Read\n    \"resolveKeyframes\", // Write/Read/Write/Read\n    \"update\", // Compute\n    \"preRender\", // Compute\n    \"render\", // Write\n    \"postRender\", // Compute\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0,\n        timestamp: 0,\n        isProcessing: false,\n    };\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(() => (runNextFrame = true));\n        return acc;\n    }, {});\n    const processStep = (stepId) => {\n        steps[stepId].process(state);\n    };\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        stepsOrder.forEach(processStep);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => stepsOrder.forEach((key) => steps[key].cancel(process));\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n","import { noop } from '../utils/noop.mjs';\nimport { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: frame, cancel: cancelFrame, state: frameData, steps, } = createRenderBatcher(typeof requestAnimationFrame !== \"undefined\" ? requestAnimationFrame : noop, true);\n\nexport { cancelFrame, frame, frameData, steps };\n","import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { frameData } from './frame.mjs';\n\nlet now;\nfunction clearTime() {\n    now = undefined;\n}\n/**\n * An eventloop-synchronous alternative to performance.now().\n *\n * Ensures that time measurements remain consistent within a synchronous context.\n * Usually calling performance.now() twice within the same synchronous context\n * will return different values which isn't useful for animations when we're usually\n * trying to sync animations to the same frame.\n */\nconst time = {\n    now: () => {\n        if (now === undefined) {\n            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming\n                ? frameData.timestamp\n                : performance.now());\n        }\n        return now;\n    },\n    set: (newTime) => {\n        now = newTime;\n        queueMicrotask(clearTime);\n    },\n};\n\nexport { time };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { createRenderBatcher } from './batcher.mjs';\n\nconst { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);\n\nexport { cancelMicrotask, microtask };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] &&\n        !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        microtask.render(visualElement.render);\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * We keep these listed seperately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","const scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    Object.assign(scaleCorrectors, correctors);\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","/**\n * Generate a list of every possible transform key.\n */\nconst transformPropOrder = [\n    \"transformPerspective\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n];\n/**\n * A quick lookup for transform props.\n */\nconst transformProps = new Set(transformPropOrder);\n\nexport { transformPropOrder, transformProps };\n","import { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(transform, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        if (transform[key] !== undefined) {\n            const transformName = translateAlias[key] || key;\n            transformString += `${transformName}(${transform[key]}) `;\n        }\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","/**\n * Provided a value and a ValueType, returns the value as that value type.\n */\nconst getValueAsType = (value, type) => {\n    return type && typeof value === \"number\"\n        ? type.transform(value)\n        : value;\n};\n\nexport { getValueAsType };\n","import { number } from '../../../value/types/numbers/index.mjs';\n\nconst int = {\n    ...number,\n    transform: Math.round,\n};\n\nexport { int };\n","import { scale, alpha } from '../../../value/types/numbers/index.mjs';\nimport { px, degrees, progressPercentage } from '../../../value/types/numbers/units.mjs';\nimport { int } from './type-int.mjs';\n\nconst numberValueTypes = {\n    // Border props\n    borderWidth: px,\n    borderTopWidth: px,\n    borderRightWidth: px,\n    borderBottomWidth: px,\n    borderLeftWidth: px,\n    borderRadius: px,\n    radius: px,\n    borderTopLeftRadius: px,\n    borderTopRightRadius: px,\n    borderBottomRightRadius: px,\n    borderBottomLeftRadius: px,\n    // Positioning props\n    width: px,\n    maxWidth: px,\n    height: px,\n    maxHeight: px,\n    size: px,\n    top: px,\n    right: px,\n    bottom: px,\n    left: px,\n    // Spacing props\n    padding: px,\n    paddingTop: px,\n    paddingRight: px,\n    paddingBottom: px,\n    paddingLeft: px,\n    margin: px,\n    marginTop: px,\n    marginRight: px,\n    marginBottom: px,\n    marginLeft: px,\n    // Transform props\n    rotate: degrees,\n    rotateX: degrees,\n    rotateY: degrees,\n    rotateZ: degrees,\n    scale,\n    scaleX: scale,\n    scaleY: scale,\n    scaleZ: scale,\n    skew: degrees,\n    skewX: degrees,\n    skewY: degrees,\n    distance: px,\n    translateX: px,\n    translateY: px,\n    translateZ: px,\n    x: px,\n    y: px,\n    z: px,\n    perspective: px,\n    transformPerspective: px,\n    opacity: alpha,\n    originX: progressPercentage,\n    originY: progressPercentage,\n    originZ: px,\n    // Misc\n    zIndex: int,\n    backgroundPositionX: px,\n    backgroundPositionY: px,\n    // SVG\n    fillOpacity: alpha,\n    strokeOpacity: alpha,\n    numOctaves: int,\n};\n\nexport { numberValueTypes };\n","import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nfunction calcOrigin(origin, offset, size) {\n    return typeof origin === \"string\"\n        ? origin\n        : px.transform(offset + size * origin);\n}\n/**\n * The SVG transform origin defaults are different to CSS and is less intuitive,\n * so we use the measured dimensions of the SVG to reconcile these.\n */\nfunction calcSVGTransformOrigin(dimensions, originX, originY) {\n    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);\n    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);\n    return `${pxOriginX} ${pxOriginY}`;\n}\n\nexport { calcSVGTransformOrigin };\n","import { px } from '../../../value/types/numbers/units.mjs';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, isSVGTag, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = Component !== Fragment\n            ? { ...filteredProps, ...visualProps, ref }\n            : {};\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));\n    // Loop over any CSS variables and assign those.\n    for (const key in vars) {\n        element.style.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    var _a;\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { isMotionValue } from '../../../value/utils/is-motion-value.mjs';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { isKeyframesTarget } from '../animation/utils/is-keyframes-target.mjs';\n\nconst isCustomValue = (v) => {\n    return Boolean(v && typeof v === \"object\" && v.mix && v.toValue);\n};\nconst resolveFinalValueInKeyframes = (v) => {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n};\n\nexport { isCustomValue, resolveFinalValueInKeyframes };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[`${pointType}X`],\n            y: event[`${pointType}Y`],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = isActive ? \"pointerenter\" : \"pointerleave\";\n    const callbackName = isActive ? \"onHoverStart\" : \"onHoverEnd\";\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        const callback = props[callbackName];\n        if (callback) {\n            frame.postRender(() => callback(event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                const handler = !globalTapTarget &&\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel\n                    : onTap;\n                if (handler) {\n                    frame.update(() => handler(endEvent, endInfo));\n                }\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n                passive: !(props.onTap || props[\"onPointerUp\"]),\n            });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n                passive: !(props.onTapCancel ||\n                    props[\"onPointerCancel\"]),\n            });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.postRender(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.postRender(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.postRender(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n            passive: !(props.onTapStart ||\n                props[\"onPointerStart\"]),\n        });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction getValueTransition(transition, key) {\n    return (transition[key] ||\n        transition[\"default\"] ||\n        transition);\n}\n\nexport { getValueTransition, isTransitionDefined };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/u.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n    else {\n        return true;\n    }\n}\n\nexport { isNone };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)$/u.test(v);\n\nexport { isNumericalString };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n","import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /\\b([a-z-]*)\\(.*?\\)/gu;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { analyseComplexValue } from '../../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../../dom/value-types/animatable-none.mjs';\n\n/**\n * If we encounter keyframes like \"none\" or \"0\" and we also have keyframes like\n * \"#fff\" or \"200px 200px\" we want to find a keyframe to serve as a template for\n * the \"none\" keyframes. In this case \"#fff\" or \"200px 200px\" - then these get turned into\n * zero equivalents, i.e. \"#fff0\" or \"0px 0px\".\n */\nconst invalidTemplates = new Set([\"auto\", \"none\", \"0\"]);\nfunction makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {\n    let i = 0;\n    let animatableTemplate = undefined;\n    while (i < unresolvedKeyframes.length && !animatableTemplate) {\n        const keyframe = unresolvedKeyframes[i];\n        if (typeof keyframe === \"string\" &&\n            !invalidTemplates.has(keyframe) &&\n            analyseComplexValue(keyframe).values.length) {\n            animatableTemplate = unresolvedKeyframes[i];\n        }\n        i++;\n    }\n    if (animatableTemplate && name) {\n        for (const noneIndex of noneKeyframeIndexes) {\n            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);\n        }\n    }\n}\n\nexport { makeNoneKeyframesAnimatable };\n","import { isNone } from '../../animation/utils/is-none.mjs';\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\nimport { positionalKeys, isNumOrPxType, positionalValues } from './utils/unit-conversion.mjs';\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\n\nclass DOMKeyframesResolver extends KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue) {\n        super(unresolvedKeyframes, onComplete, name, motionValue, motionValue === null || motionValue === void 0 ? void 0 : motionValue.owner, true);\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, element, name } = this;\n        if (!element.current)\n            return;\n        super.readKeyframes();\n        /**\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            const keyframe = unresolvedKeyframes[i];\n            if (typeof keyframe === \"string\" && isCSSVariableToken(keyframe)) {\n                const resolved = getVariableValue(keyframe, element.current);\n                if (resolved !== undefined) {\n                    unresolvedKeyframes[i] = resolved;\n                }\n                if (i === unresolvedKeyframes.length - 1) {\n                    this.finalKeyframe = keyframe;\n                }\n            }\n        }\n        /**\n         * Resolve \"none\" values. We do this potentially twice - once before and once after measuring keyframes.\n         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which\n         * have a far bigger performance impact.\n         */\n        this.resolveNoneKeyframes();\n        /**\n         * Check to see if unit type has changed. If so schedule jobs that will\n         * temporarily set styles to the destination keyframes.\n         * Skip if we have more than two keyframes or this isn't a positional value.\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\n         */\n        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n            return;\n        }\n        const [origin, target] = unresolvedKeyframes;\n        const originType = findDimensionValueType(origin);\n        const targetType = findDimensionValueType(target);\n        /**\n         * Either we don't recognise these value types or we can animate between them.\n         */\n        if (originType === targetType)\n            return;\n        /**\n         * If both values are numbers or pixels, we can animate between them by\n         * converting them to numbers.\n         */\n        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n            for (let i = 0; i < unresolvedKeyframes.length; i++) {\n                const value = unresolvedKeyframes[i];\n                if (typeof value === \"string\") {\n                    unresolvedKeyframes[i] = parseFloat(value);\n                }\n            }\n        }\n        else {\n            /**\n             * Else, the only way to resolve this is by measuring the element.\n             */\n            this.needsMeasurement = true;\n        }\n    }\n    resolveNoneKeyframes() {\n        const { unresolvedKeyframes, name } = this;\n        const noneKeyframeIndexes = [];\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (isNone(unresolvedKeyframes[i])) {\n                noneKeyframeIndexes.push(i);\n            }\n        }\n        if (noneKeyframeIndexes.length) {\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n        }\n    }\n    measureInitialState() {\n        const { element, unresolvedKeyframes, name } = this;\n        if (!element.current)\n            return;\n        if (name === \"height\") {\n            this.suspendedScrollY = window.pageYOffset;\n        }\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        unresolvedKeyframes[0] = this.measuredOrigin;\n        // Set final key frame to measure after next render\n        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n        if (measureKeyframe !== undefined) {\n            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);\n        }\n    }\n    measureEndState() {\n        var _a;\n        const { element, name, unresolvedKeyframes } = this;\n        if (!element.current)\n            return;\n        const value = element.getValue(name);\n        value && value.jump(this.measuredOrigin, false);\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        if (finalKeyframe !== null && this.finalKeyframe === undefined) {\n            this.finalKeyframe = finalKeyframe;\n        }\n        // If we removed transform values, reapply them before the next render\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\n                element\n                    .getValue(unsetTransformName)\n                    .set(unsetTransformValue);\n            });\n        }\n        this.resolveNoneKeyframes();\n    }\n}\n\nexport { DOMKeyframesResolver };\n","function memo(callback) {\n    let result;\n    return () => {\n        if (result === undefined)\n            result = callback();\n        return result;\n    };\n}\n\nexport { memo };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (value, name) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (name === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { warning } from '../../../utils/errors.mjs';\nimport { isAnimatable } from '../../utils/is-animatable.mjs';\n\nfunction hasKeyframesChanged(keyframes) {\n    const current = keyframes[0];\n    if (keyframes.length === 1)\n        return true;\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] !== current)\n            return true;\n    }\n}\nfunction canAnimate(keyframes, name, type, velocity) {\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n    const originKeyframe = keyframes[0];\n    if (originKeyframe === null)\n        return false;\n    /**\n     * These aren't traditionally animatable but we do support them.\n     * In future we could look into making this more generic or replacing\n     * this function with mix() === mixImmediate\n     */\n    if (name === \"display\" || name === \"visibility\")\n        return true;\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(originKeyframe, name);\n    const isTargetAnimatable = isAnimatable(targetKeyframe, name);\n    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n    // Always skip if any of these are true\n    if (!isOriginAnimatable || !isTargetAnimatable) {\n        return false;\n    }\n    return hasKeyframesChanged(keyframes) || (type === \"spring\" && velocity);\n}\n\nexport { canAnimate };\n","import { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = cubicBezier(0.42, 0, 1, 1);\nconst easeOut = cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = reverseEasing(backOut);\nconst backInOut = mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","import { mixNumber } from '../mix/number.mjs';\nimport { progress } from '../progress.mjs';\n\nfunction fillOffset(offset, remaining) {\n    const min = offset[offset.length - 1];\n    for (let i = 1; i <= remaining; i++) {\n        const offsetProgress = progress(0, remaining, i);\n        offset.push(mixNumber(min, 1, offsetProgress));\n    }\n}\n\nexport { fillOffset };\n","import { fillOffset } from './fill.mjs';\n\nfunction defaultOffset(arr) {\n    const offset = [0];\n    fillOffset(offset, arr.length - 1);\n    return offset;\n}\n\nexport { defaultOffset };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","import { KeyframeResolver } from '../../render/utils/KeyframesResolver.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { keyframes } from '../generators/keyframes.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { mix } from '../../utils/mix/index.mjs';\nimport { calcGeneratorDuration } from '../generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nimport { frameloopDriver } from './drivers/driver-frameloop.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nconst generators = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of\n * features we expose publically. Mostly the compatibility is to ensure visual identity\n * between both WAAPI and main thread animations.\n */\nclass MainThreadAnimation extends BaseAnimation {\n    constructor({ KeyframeResolver: KeyframeResolver$1 = KeyframeResolver, ...options }) {\n        super(options);\n        /**\n         * The time at which the animation was paused.\n         */\n        this.holdTime = null;\n        /**\n         * The time at which the animation was started.\n         */\n        this.startTime = null;\n        /**\n         * The time at which the animation was cancelled.\n         */\n        this.cancelTime = null;\n        /**\n         * The current time of the animation.\n         */\n        this.currentTime = 0;\n        /**\n         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.\n         */\n        this.playbackSpeed = 1;\n        /**\n         * The state of the animation to apply when the animation is resolved. This\n         * allows calls to the public API to control the animation before it is resolved,\n         * without us having to resolve it first.\n         */\n        this.pendingPlayState = \"running\";\n        this.state = \"idle\";\n        /**\n         * This method is bound to the instance to fix a pattern where\n         * animation.stop is returned as a reference from a useEffect.\n         */\n        this.stop = () => {\n            this.resolver.cancel();\n            this.isStopped = true;\n            if (this.state === \"idle\")\n                return;\n            this.teardown();\n            const { onStop } = this.options;\n            onStop && onStop();\n        };\n        const { name, motionValue, keyframes } = this.options;\n        const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);\n        if (name && motionValue && motionValue.owner) {\n            this.resolver = motionValue.owner.resolveKeyframes(keyframes, onResolved, name, motionValue);\n        }\n        else {\n            this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue);\n        }\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes$1) {\n        const { type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = this.options;\n        const generatorFactory = generators[type] || keyframes;\n        /**\n         * If our generator doesn't support mixing numbers, we need to replace keyframes with\n         * [0, 100] and then make a function that maps that to the actual keyframes.\n         *\n         * 100 is chosen instead of 1 as it works nicer with spring animations.\n         */\n        let mapPercentToKeyframes;\n        let mirroredGenerator;\n        if (generatorFactory !== keyframes &&\n            typeof keyframes$1[0] !== \"number\") {\n            if (process.env.NODE_ENV !== \"production\") {\n                invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n            }\n            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n            keyframes$1 = [0, 100];\n        }\n        const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });\n        /**\n         * If we have a mirror repeat type we need to create a second generator that outputs the\n         * mirrored (not reversed) animation and later ping pong between the two generators.\n         */\n        if (repeatType === \"mirror\") {\n            mirroredGenerator = generatorFactory({\n                ...this.options,\n                keyframes: [...keyframes$1].reverse(),\n                velocity: -velocity,\n            });\n        }\n        /**\n         * If duration is undefined and we have repeat options,\n         * we need to calculate a duration from the generator.\n         *\n         * We set it to the generator itself to cache the duration.\n         * Any timeline resolver will need to have already precalculated\n         * the duration by this step.\n         */\n        if (generator.calculatedDuration === null) {\n            generator.calculatedDuration = calcGeneratorDuration(generator);\n        }\n        const { calculatedDuration } = generator;\n        const resolvedDuration = calculatedDuration + repeatDelay;\n        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n        return {\n            generator,\n            mirroredGenerator,\n            mapPercentToKeyframes,\n            calculatedDuration,\n            resolvedDuration,\n            totalDuration,\n        };\n    }\n    onPostResolved() {\n        const { autoplay = true } = this.options;\n        this.play();\n        if (this.pendingPlayState === \"paused\" || !autoplay) {\n            this.pause();\n        }\n        else {\n            this.state = this.pendingPlayState;\n        }\n    }\n    tick(timestamp, sample = false) {\n        const { resolved } = this;\n        // If the animations has failed to resolve, return the final keyframe.\n        if (!resolved) {\n            const { keyframes } = this.options;\n            return { done: true, value: keyframes[keyframes.length - 1] };\n        }\n        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration, } = resolved;\n        if (this.startTime === null)\n            return generator.next(0);\n        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (this.speed > 0) {\n            this.startTime = Math.min(this.startTime, timestamp);\n        }\n        else if (this.speed < 0) {\n            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);\n        }\n        // Update currentTime\n        if (sample) {\n            this.currentTime = timestamp;\n        }\n        else if (this.holdTime !== null) {\n            this.currentTime = this.holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            this.currentTime =\n                Math.round(timestamp - this.startTime) * this.speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);\n        const isInDelayPhase = this.speed >= 0\n            ? timeWithoutDelay < 0\n            : timeWithoutDelay > totalDuration;\n        this.currentTime = Math.max(timeWithoutDelay, 0);\n        // If this animation has finished, set the current time  to the total duration.\n        if (this.state === \"finished\" && this.holdTime === null) {\n            this.currentTime = totalDuration;\n        }\n        let elapsed = this.currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes[0] }\n            : frameGenerator.next(elapsed);\n        if (mapPercentToKeyframes) {\n            state.value = mapPercentToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done =\n                this.speed >= 0\n                    ? this.currentTime >= totalDuration\n                    : this.currentTime <= 0;\n        }\n        const isAnimationFinished = this.holdTime === null &&\n            (this.state === \"finished\" || (this.state === \"running\" && done));\n        if (isAnimationFinished && finalKeyframe !== undefined) {\n            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);\n        }\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            this.finish();\n        }\n        return state;\n    }\n    get duration() {\n        const { resolved } = this;\n        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;\n    }\n    get time() {\n        return millisecondsToSeconds(this.currentTime);\n    }\n    set time(newTime) {\n        newTime = secondsToMilliseconds(newTime);\n        this.currentTime = newTime;\n        if (this.holdTime !== null || this.speed === 0) {\n            this.holdTime = newTime;\n        }\n        else if (this.driver) {\n            this.startTime = this.driver.now() - newTime / this.speed;\n        }\n    }\n    get speed() {\n        return this.playbackSpeed;\n    }\n    set speed(newSpeed) {\n        const hasChanged = this.playbackSpeed !== newSpeed;\n        this.playbackSpeed = newSpeed;\n        if (hasChanged) {\n            this.time = millisecondsToSeconds(this.currentTime);\n        }\n    }\n    play() {\n        if (!this.resolver.isScheduled) {\n            this.resolver.resume();\n        }\n        if (!this._resolved) {\n            this.pendingPlayState = \"running\";\n            return;\n        }\n        if (this.isStopped)\n            return;\n        const { driver = frameloopDriver, onPlay } = this.options;\n        if (!this.driver) {\n            this.driver = driver((timestamp) => this.tick(timestamp));\n        }\n        onPlay && onPlay();\n        const now = this.driver.now();\n        if (this.holdTime !== null) {\n            this.startTime = now - this.holdTime;\n        }\n        else if (!this.startTime || this.state === \"finished\") {\n            this.startTime = now;\n        }\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.cancelTime = this.startTime;\n        this.holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        this.state = \"running\";\n        this.driver.start();\n    }\n    pause() {\n        var _a;\n        if (!this._resolved) {\n            this.pendingPlayState = \"paused\";\n            return;\n        }\n        this.state = \"paused\";\n        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;\n    }\n    complete() {\n        if (this.state !== \"running\") {\n            this.play();\n        }\n        this.pendingPlayState = this.state = \"finished\";\n        this.holdTime = null;\n    }\n    finish() {\n        this.teardown();\n        this.state = \"finished\";\n        const { onComplete } = this.options;\n        onComplete && onComplete();\n    }\n    cancel() {\n        if (this.cancelTime !== null) {\n            this.tick(this.cancelTime);\n        }\n        this.teardown();\n        this.updateFinishedPromise();\n    }\n    teardown() {\n        this.state = \"idle\";\n        this.stopDriver();\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        this.startTime = this.cancelTime = null;\n        this.resolver.cancel();\n    }\n    stopDriver() {\n        if (!this.driver)\n            return;\n        this.driver.stop();\n        this.driver = undefined;\n    }\n    sample(time) {\n        this.startTime = 0;\n        return this.tick(time, true);\n    }\n}\n// Legacy interface\nfunction animateValue(options) {\n    return new MainThreadAnimation(options);\n}\n\nexport { MainThreadAnimation, animateValue };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean(!easing ||\n        (typeof easing === \"string\" && easing in supportedWaapiEasing) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasingWithDefault(easing) {\n    return (mapEasingToNativeEasing(easing) ||\n        supportedWaapiEasing.easeOut);\n}\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing) {\n        return undefined;\n    }\n    else if (isBezierDefinition(easing)) {\n        return cubicBezierAsString(easing);\n    }\n    else if (Array.isArray(easing)) {\n        return easing.map(mapEasingToNativeEasingWithDefault);\n    }\n    else {\n        return supportedWaapiEasing[easing];\n    }\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","import { time } from '../../frameloop/sync-time.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\n    // or until we implement support for linear() easing.\n    // \"background-color\"\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return (options.type === \"spring\" ||\n        options.name === \"backgroundColor\" ||\n        !isWaapiSupportedEasing(options.ease));\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = animateStyle(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = time.now();\n        if (this.pendingTimeline) {\n            animation.timeline = this.pendingTimeline;\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            animation.timeline = timeline;\n            animation.onfinish = null;\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            motionValue &&\n            motionValue.owner &&\n            motionValue.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !motionValue.owner.getProps().onUpdate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n","import { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        options = {\n            ...options,\n            ...getDefaultTransition(name, options),\n        };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n        options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (instantAnimationState.current ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n        return new AcceleratedAnimation(options);\n    }\n    else {\n        return new MainThreadAnimation(options);\n    }\n};\n\nexport { animateMotionValue };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            elapsed: 0,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.HandoffAppearAnimations) {\n            const props = visualElement.getProps();\n            const appearId = props[optimizedAppearDataAttribute];\n            if (appearId) {\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n                if (elapsed !== null) {\n                    valueTransition.elapsed = elapsed;\n                    isHandoff = true;\n                }\n            }\n        }\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n                animation.then(() => willChange.remove(key));\n            }\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        frame.postRender(() => {\n            visualElement.notify(\"AnimationComplete\", definition);\n        });\n    });\n}\n\nexport { animateVisualElement };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        var _a;\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             */\n            if (shouldAnimateType && (!isInherited || handledRemovedValues)) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const instance = node.instance;\n        if (instance &&\n            instance.style &&\n            instance.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, rebaseAxisConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             */\n            if (window.HandoffCancelAllAnimations) {\n                window.HandoffCancelAllAnimations();\n            }\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.2.6\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.2.6 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { warning, invariant } from '../utils/errors.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { variantProps } from './utils/variant-props.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\nconst numVariantProps = variantProps.length;\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        this.resolveKeyframes = (keyframes, \n        // We use an onComplete callback here rather than a Promise as a Promise\n        // resolution is a microtask and we want to retain the ability to force\n        // the resolution of keyframes synchronously.\n        onComplete, name, value) => {\n            return new this.KeyframeResolver(keyframes, onComplete, name, value, this);\n        };\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => frame.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        var _a;\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            (_a = this.features[key]) === null || _a === void 0 ? void 0 : _a.unmount();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, initialLayoutGroupConfig) {\n        let ProjectionNodeConstructor;\n        let MeasureLayout;\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n            renderedProps.ignoreStrict\n                ? warning(false, strictMessage)\n                : invariant(false, strictMessage);\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent, } = featureDefinitions[name];\n            if (ProjectionNode)\n                ProjectionNodeConstructor = ProjectionNode;\n            if (isEnabled(renderedProps)) {\n                if (!this.features[name] && FeatureConstructor) {\n                    this.features[name] = new FeatureConstructor(this);\n                }\n                if (MeasureLayoutComponent) {\n                    MeasureLayout = MeasureLayoutComponent;\n                }\n            }\n        }\n        if ((this.type === \"html\" || this.type === \"svg\") &&\n            !this.projection &&\n            ProjectionNodeConstructor) {\n            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, } = renderedProps;\n            this.projection = new ProjectionNodeConstructor(this.latestValues, renderedProps[\"data-framer-portal-id\"]\n                ? undefined\n                : getClosestProjectingNode(this.parent));\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n                layoutRoot,\n            });\n        }\n        return MeasureLayout;\n    }\n    updateFeatures() {\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature.isMounted) {\n                feature.update();\n            }\n            else {\n                feature.mount();\n                feature.isMounted = true;\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    getVariantContext(startAtParent = false) {\n        if (startAtParent) {\n            return this.parent ? this.parent.getVariantContext() : undefined;\n        }\n        if (!this.isControllingVariants) {\n            const context = this.parent\n                ? this.parent.getVariantContext() || {}\n                : {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { VisualElement } from '../VisualElement.mjs';\nimport { DOMKeyframesResolver } from './DOMKeyframesResolver.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n            enableHardwareAcceleration: true,\n        });\n};\n\nexport { createDomVisualElement };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","const checkStringStartsWith = (token) => (key) => typeof key === \"string\" && key.startsWith(token);\nconst isCSSVariableName = checkStringStartsWith(\"--\");\nconst startsAsVariableToken = checkStringStartsWith(\"var(--\");\nconst isCSSVariableToken = (value) => {\n    const startsWithToken = startsAsVariableToken(value);\n    if (!startsWithToken)\n        return false;\n    // Ensure any comments are stripped from the value as this can harm performance of the regex.\n    return singleCssVariableRegex.test(value.split(\"/*\")[0].trim());\n};\nconst singleCssVariableRegex = /var\\(--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)$/iu;\n\nexport { isCSSVariableName, isCSSVariableToken };\n","const MotionGlobalConfig = {\n    skipAnimations: false,\n    useManualTiming: false,\n};\n\nexport { MotionGlobalConfig };\n","function addUniqueItem(arr, item) {\n    if (arr.indexOf(item) === -1)\n        arr.push(item);\n}\nfunction removeItem(arr, item) {\n    const index = arr.indexOf(item);\n    if (index > -1)\n        arr.splice(index, 1);\n}\n// Adapted from array-move\nfunction moveItem([...arr], fromIndex, toIndex) {\n    const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;\n    if (startIndex >= 0 && startIndex < arr.length) {\n        const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;\n        const [item] = arr.splice(fromIndex, 1);\n        arr.splice(endIndex, 0, item);\n    }\n    return arr;\n}\n\nexport { addUniqueItem, moveItem, removeItem };\n","const clamp = (min, max, v) => {\n    if (v > max)\n        return max;\n    if (v < min)\n        return min;\n    return v;\n};\n\nexport { clamp };\n","import { noop } from './noop.mjs';\n\nlet warning = noop;\nlet invariant = noop;\nif (process.env.NODE_ENV !== \"production\") {\n    warning = (check, message) => {\n        if (!check && typeof console !== \"undefined\") {\n            console.warn(message);\n        }\n    };\n    invariant = (check, message) => {\n        if (!check) {\n            throw new Error(message);\n        }\n    };\n}\n\nexport { invariant, warning };\n","import { invariant } from './errors.mjs';\nimport { clamp } from './clamp.mjs';\nimport { pipe } from './pipe.mjs';\nimport { progress } from './progress.mjs';\nimport { noop } from './noop.mjs';\nimport { mix } from './mix/index.mjs';\n\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || mix;\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\n/**\n * Create a function that maps from a numerical input array to a generic output array.\n *\n * Accepts:\n *   - Numbers\n *   - Colors (hex, hsl, hsla, rgb, rgba)\n *   - Complex (combinations of one or more numbers or strings)\n *\n * ```jsx\n * const mixColor = interpolate([0, 1], ['#fff', '#000'])\n *\n * mixColor(0.5) // 'rgba(128, 128, 128, 1)'\n * ```\n *\n * TODO Revist this approach once we've moved to data models for values,\n * probably not needed to pregenerate mixer functions.\n *\n * @public\n */\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    invariant(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    /**\n     * If we're only provided a single input, we can just make a function\n     * that returns the output.\n     */\n    if (inputLength === 1)\n        return () => output[0];\n    if (inputLength === 2 && input[0] === input[1])\n        return () => output[1];\n    // If input runs highest -> lowest, reverse both arrays\n    if (input[0] > input[inputLength - 1]) {\n        input = [...input].reverse();\n        output = [...output].reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const numMixers = mixers.length;\n    const interpolator = (v) => {\n        let i = 0;\n        if (numMixers > 1) {\n            for (; i < input.length - 2; i++) {\n                if (v < input[i + 1])\n                    break;\n            }\n        }\n        const progressInRange = progress(input[i], input[i + 1], v);\n        return mixers[i](progressInRange);\n    };\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nexport { interpolate };\n","const isBrowser = typeof document !== \"undefined\";\n\nexport { isBrowser };\n","// Adapted from https://gist.github.com/mjackson/5311256\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nexport { hslaToRgba };\n","import { mixNumber } from './number.mjs';\nimport { invariant } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    invariant(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n","const invisibleValues = new Set([\"none\", \"hidden\"]);\n/**\n * Returns a function that, when provided a progress value between 0 and 1,\n * will return the \"none\" or \"hidden\" string only when the progress is that of\n * the origin or target.\n */\nfunction mixVisibility(origin, target) {\n    if (invisibleValues.has(origin)) {\n        return (p) => (p <= 0 ? origin : target);\n    }\n    else {\n        return (p) => (p >= 1 ? target : origin);\n    }\n}\n\nexport { invisibleValues, mixVisibility };\n","import { mixNumber as mixNumber$1 } from './number.mjs';\nimport { mixColor } from './color.mjs';\nimport { pipe } from '../pipe.mjs';\nimport { warning } from '../errors.mjs';\nimport { color } from '../../value/types/color/index.mjs';\nimport { complex, analyseComplexValue } from '../../value/types/complex/index.mjs';\nimport { isCSSVariableToken } from '../../render/dom/utils/is-css-variable.mjs';\nimport { invisibleValues, mixVisibility } from './visibility.mjs';\n\nfunction mixImmediate(a, b) {\n    return (p) => (p > 0 ? b : a);\n}\nfunction mixNumber(a, b) {\n    return (p) => mixNumber$1(a, b, p);\n}\nfunction getMixer(a) {\n    if (typeof a === \"number\") {\n        return mixNumber;\n    }\n    else if (typeof a === \"string\") {\n        return isCSSVariableToken(a)\n            ? mixImmediate\n            : color.test(a)\n                ? mixColor\n                : mixComplex;\n    }\n    else if (Array.isArray(a)) {\n        return mixArray;\n    }\n    else if (typeof a === \"object\") {\n        return color.test(a) ? mixColor : mixObject;\n    }\n    return mixImmediate;\n}\nfunction mixArray(a, b) {\n    const output = [...a];\n    const numValues = output.length;\n    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));\n    return (p) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](p);\n        }\n        return output;\n    };\n}\nfunction mixObject(a, b) {\n    const output = { ...a, ...b };\n    const blendValue = {};\n    for (const key in output) {\n        if (a[key] !== undefined && b[key] !== undefined) {\n            blendValue[key] = getMixer(a[key])(a[key], b[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n}\nfunction matchOrder(origin, target) {\n    var _a;\n    const orderedOrigin = [];\n    const pointers = { color: 0, var: 0, number: 0 };\n    for (let i = 0; i < target.values.length; i++) {\n        const type = target.types[i];\n        const originIndex = origin.indexes[type][pointers[type]];\n        const originValue = (_a = origin.values[originIndex]) !== null && _a !== void 0 ? _a : 0;\n        orderedOrigin[i] = originValue;\n        pointers[type]++;\n    }\n    return orderedOrigin;\n}\nconst mixComplex = (origin, target) => {\n    const template = complex.createTransformer(target);\n    const originStats = analyseComplexValue(origin);\n    const targetStats = analyseComplexValue(target);\n    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&\n        originStats.indexes.color.length === targetStats.indexes.color.length &&\n        originStats.indexes.number.length >= targetStats.indexes.number.length;\n    if (canInterpolate) {\n        if ((invisibleValues.has(origin) &&\n            !targetStats.values.length) ||\n            (invisibleValues.has(target) &&\n                !originStats.values.length)) {\n            return mixVisibility(origin, target);\n        }\n        return pipe(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);\n    }\n    else {\n        warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return mixImmediate(origin, target);\n    }\n};\n\nexport { getMixer, mixArray, mixComplex, mixObject };\n","import { getMixer } from './complex.mjs';\nimport { mixNumber } from './number.mjs';\n\nfunction mix(from, to, p) {\n    if (typeof from === \"number\" &&\n        typeof to === \"number\" &&\n        typeof p === \"number\") {\n        return mixNumber(from, to, p);\n    }\n    const mixer = getMixer(from);\n    return mixer(from, to);\n}\n\nexport { mix };\n","/*\n  Value in range from progress\n\n  Given a lower limit and an upper limit, we return the value within\n  that range as expressed by progress (usually a number from 0 to 1)\n\n  So progress = 0.5 would change\n\n  from -------- to\n\n  to\n\n  from ---- to\n\n  E.g. from = 10, to = 20, progress = 0.5 => 15\n\n  @param [number]: Lower limit of range\n  @param [number]: Upper limit of range\n  @param [number]: The progress between lower and upper limits expressed 0-1\n  @return [number]: Value as calculated from progress within range (not limited within range)\n*/\nconst mixNumber = (from, to, progress) => {\n    return from + (to - from) * progress;\n};\n\nexport { mixNumber };\n","const noop = (any) => any;\n\nexport { noop };\n","/**\n * Pipe\n * Compose other transformers to run linearily\n * pipe(min(20), max(40))\n * @param  {...functions} transformers\n * @return {function}\n */\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nexport { pipe };\n","/*\n  Progress within given range\n\n  Given a lower limit and an upper limit, we return the progress\n  (expressed as a number 0-1) represented by the given value, and\n  limit that progress to within 0-1.\n\n  @param [number]: Lower limit\n  @param [number]: Upper limit\n  @param [number]: Value to find progress within given range\n  @return [number]: Progress of value within range as expressed 0-1\n*/\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nexport { progress };\n","import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","/*\n  Convert velocity into velocity per second\n\n  @param [number]: Unit per frame\n  @param [number]: Frame duration in ms\n*/\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nexport { velocityPerSecond };\n","import { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"11.2.6\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n","import { rgba } from './rgba.mjs';\nimport { isColorString } from './utils.mjs';\n\nfunction parseHex(v) {\n    let r = \"\";\n    let g = \"\";\n    let b = \"\";\n    let a = \"\";\n    // If we have 6 characters, ie #FF0000\n    if (v.length > 5) {\n        r = v.substring(1, 3);\n        g = v.substring(3, 5);\n        b = v.substring(5, 7);\n        a = v.substring(7, 9);\n        // Or we have 3 characters, ie #F00\n    }\n    else {\n        r = v.substring(1, 2);\n        g = v.substring(2, 3);\n        b = v.substring(3, 4);\n        a = v.substring(4, 5);\n        r += r;\n        g += g;\n        b += b;\n        a += a;\n    }\n    return {\n        red: parseInt(r, 16),\n        green: parseInt(g, 16),\n        blue: parseInt(b, 16),\n        alpha: a ? parseInt(a, 16) / 255 : 1,\n    };\n}\nconst hex = {\n    test: isColorString(\"#\"),\n    parse: parseHex,\n    transform: rgba.transform,\n};\n\nexport { hex };\n","import { alpha } from '../numbers/index.mjs';\nimport { percent } from '../numbers/units.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst hsla = {\n    test: isColorString(\"hsl\", \"hue\"),\n    parse: splitColor(\"hue\", \"saturation\", \"lightness\"),\n    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {\n        return (\"hsla(\" +\n            Math.round(hue) +\n            \", \" +\n            percent.transform(sanitize(saturation)) +\n            \", \" +\n            percent.transform(sanitize(lightness)) +\n            \", \" +\n            sanitize(alpha.transform(alpha$1)) +\n            \")\");\n    },\n};\n\nexport { hsla };\n","import { isString } from '../utils.mjs';\nimport { hex } from './hex.mjs';\nimport { hsla } from './hsla.mjs';\nimport { rgba } from './rgba.mjs';\n\nconst color = {\n    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),\n    parse: (v) => {\n        if (rgba.test(v)) {\n            return rgba.parse(v);\n        }\n        else if (hsla.test(v)) {\n            return hsla.parse(v);\n        }\n        else {\n            return hex.parse(v);\n        }\n    },\n    transform: (v) => {\n        return isString(v)\n            ? v\n            : v.hasOwnProperty(\"red\")\n                ? rgba.transform(v)\n                : hsla.transform(v);\n    },\n};\n\nexport { color };\n","import { clamp } from '../../../utils/clamp.mjs';\nimport { number, alpha } from '../numbers/index.mjs';\nimport { sanitize } from '../utils.mjs';\nimport { isColorString, splitColor } from './utils.mjs';\n\nconst clampRgbUnit = (v) => clamp(0, 255, v);\nconst rgbUnit = {\n    ...number,\n    transform: (v) => Math.round(clampRgbUnit(v)),\n};\nconst rgba = {\n    test: isColorString(\"rgb\", \"red\"),\n    parse: splitColor(\"red\", \"green\", \"blue\"),\n    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => \"rgba(\" +\n        rgbUnit.transform(red) +\n        \", \" +\n        rgbUnit.transform(green) +\n        \", \" +\n        rgbUnit.transform(blue) +\n        \", \" +\n        sanitize(alpha.transform(alpha$1)) +\n        \")\",\n};\n\nexport { rgbUnit, rgba };\n","import { isString, singleColorRegex, floatRegex } from '../utils.mjs';\n\n/**\n * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,\n * but false if a number or multiple colors\n */\nconst isColorString = (type, testProp) => (v) => {\n    return Boolean((isString(v) && singleColorRegex.test(v) && v.startsWith(type)) ||\n        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));\n};\nconst splitColor = (aName, bName, cName) => (v) => {\n    if (!isString(v))\n        return v;\n    const [a, b, c, alpha] = v.match(floatRegex);\n    return {\n        [aName]: parseFloat(a),\n        [bName]: parseFloat(b),\n        [cName]: parseFloat(c),\n        alpha: alpha !== undefined ? parseFloat(alpha) : 1,\n    };\n};\n\nexport { isColorString, splitColor };\n","import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n","import { clamp } from '../../../utils/clamp.mjs';\n\nconst number = {\n    test: (v) => typeof v === \"number\",\n    parse: parseFloat,\n    transform: (v) => v,\n};\nconst alpha = {\n    ...number,\n    transform: (v) => clamp(0, 1, v),\n};\nconst scale = {\n    ...number,\n    default: 1,\n};\n\nexport { alpha, number, scale };\n","import { isString } from '../utils.mjs';\n\nconst createUnitType = (unit) => ({\n    test: (v) => isString(v) && v.endsWith(unit) && v.split(\" \").length === 1,\n    parse: parseFloat,\n    transform: (v) => `${v}${unit}`,\n});\nconst degrees = createUnitType(\"deg\");\nconst percent = createUnitType(\"%\");\nconst px = createUnitType(\"px\");\nconst vh = createUnitType(\"vh\");\nconst vw = createUnitType(\"vw\");\nconst progressPercentage = {\n    ...percent,\n    parse: (v) => percent.parse(v) / 100,\n    transform: (v) => percent.transform(v * 100),\n};\n\nexport { degrees, percent, progressPercentage, px, vh, vw };\n","/**\n * TODO: When we move from string as a source of truth to data models\n * everything in this folder should probably be referred to as models vs types\n */\n// If this number is a decimal, make it just five decimal places\n// to avoid exponents\nconst sanitize = (v) => Math.round(v * 100000) / 100000;\nconst floatRegex = /-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/gu;\nconst colorRegex = /(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))/giu;\nconst singleColorRegex = /^(?:#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\))$/iu;\nfunction isString(v) {\n    return typeof v === \"string\";\n}\n\nexport { colorRegex, floatRegex, isString, sanitize, singleColorRegex };\n","const isMotionValue = (value) => Boolean(value && value.getVelocity);\n\nexport { isMotionValue };\n"],"names":["LayoutGroupContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PresenceContext","Queue","constructor","order","scheduled","Set","add","process","has","push","remove","index","indexOf","splice","delete","clear","length","stepsOrder","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","steps","reduce","acc","key","createRenderStep","thisFrame","nextFrame","numToRun","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","queue","cancel","i","frameData","processStep","stepId","processBatch","GlobalConfig","c","useManualTiming","performance","now","Math","max","min","forEach","wake","frame","cancelFrame","_batcher_mjs__WEBPACK_IMPORTED_MODULE_0__","Z","requestAnimationFrame","_utils_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","clearTime","undefined","time","set","_frame_mjs__WEBPACK_IMPORTED_MODULE_0__","_utils_GlobalConfig_mjs__WEBPACK_IMPORTED_MODULE_1__","newTime","queueMicrotask","result","isValidProp","MotionContext","react","LazyContext","strict","camelToDash","str","replace","toLowerCase","optimizedAppearDataAttribute","microtask","cancelMicrotask","batcher","isRefObject","ref","Object","prototype","hasOwnProperty","call","isVariantLabel","v","Array","isArray","isAnimationControls","start","variantPriorityOrder","variantProps","isControllingVariants","props","animate","some","name","isVariantNode","Boolean","variants","variantLabelsAsDependency","prop","join","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","lowercaseSVGElements","isSVGComponent","Component","includes","test","scaleCorrectors","transformPropOrder","transformProps","isForcedMotionValue","layoutId","startsWith","translateAlias","x","y","z","transformPerspective","numTransforms","getValueAsType","value","type","transform","type_int_int","numbers","Rx","round","numberValueTypes","borderWidth","units","px","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderRadius","radius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","width","maxWidth","height","maxHeight","size","top","right","bottom","left","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","margin","marginTop","marginRight","marginBottom","marginLeft","rotate","RW","rotateX","rotateY","rotateZ","scale","bA","scaleX","scaleY","scaleZ","skew","skewX","skewY","distance","translateX","translateY","translateZ","perspective","opacity","Fq","originX","$C","originY","originZ","zIndex","backgroundPositionX","backgroundPositionY","fillOpacity","strokeOpacity","numOctaves","buildHTMLStyles","latestValues","options","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","transformIsNone","is_css_variable","f","valueType","valueAsType","default","buildTransform","enableHardwareAcceleration","allowTransformNone","transformIsDefault","transformString","transformName","trim","createHtmlRenderState","copyRawValuesOnly","target","source","is_motion_value","useHTMLProps","visualState","htmlProps","useStyle","styleProp","assign","useInitialMotionValues","useMemo","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","isValidMotionProp","shouldForward","require","_a","calcOrigin","origin","offset","dashKeys","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","viewBox","attrs","dimensions","calcSVGTransformOrigin","pxOriginX","pxOriginY","buildSVGPath","spacing","useDashCase","keys","createSvgRenderState","tag","useSVGProps","_isStatic","visualProps","rawStyles","renderHTML","element","projection","getProjectionStyles","setProperty","camelCaseAttributes","renderSVG","renderState","_styleProp","setAttribute","scrapeMotionValuesFromProps","prevProps","visualElement","newValues","getValue","liveStyle","scrape_motion_values_scrapeMotionValuesFromProps","targetKey","charAt","toUpperCase","substring","getValueState","values","get","getVelocity","resolveVariantFromProps","definition","custom","current","velocity","isKeyframesTarget","isCustomValue","mix","toValue","resolveFinalValueInKeyframes","resolveMotionValue","unwrappedValue","makeUseVisualState","context","useContext","presenceContext","context_PresenceContext","O","make","makeState","createRenderState","onMount","makeLatestValues","scrapeMotionValues","motionValues","initial","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","mount","instance","config","use_constant","h","svgMotionConfig","useVisualState","frameloop_frame","Wi","read","getBBox","getBoundingClientRect","e","render","tagName","htmlMotionConfig","addDomEvent","eventName","handler","passive","addEventListener","removeEventListener","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","addPointerInfo","addPointerEvent","createLock","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","openHorizontal","openVertical","isDragActive","openGestureLock","Feature","node","isMounted","update","addHoverEvent","isActive","callbackName","info","getProps","animationState","whileHover","setActive","postRender","isNodeOrChild","parent","child","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","all","shallowCompare","next","prev","prevLength","resolveVariant","secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","underDampedSpring","stiffness","damping","restSpeed","criticallyDampedSpring","sqrt","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","getValueTransition","instantAnimationState","isNotNull","getFinalKeyframe","repeat","repeatType","finalKeyframe","resolvedKeyframes","filter","isZeroValueString","isNumericalString","splitCSSVariableRegex","positionalKeys","isNumOrPxType","getPosFromMatrix","matrix","pos","parseFloat","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","match","transformKeys","nonTranslationalTransformKeys","positionalValues","testValueType","dimensionValueTypes","aQ","vw","vh","parse","findDimensionValueType","find","toResolve","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","from","resolver","needsMeasurement","elementsToMeasure","map","transformsToRestore","Map","removedTransforms","removeNonTranslationalTransform","measureInitialState","restore","measureEndState","suspendedScrollY","window","scrollTo","complete","readAllKeyframes","readKeyframes","KeyframeResolver","unresolvedKeyframes","onComplete","motionValue","isAsync","isComplete","scheduleResolve","resolveKeyframes","currentValue","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","resume","maxDefaults","applyDefaultFilter","slice","number","utils","KP","unit","defaultValue","functionRegex","complex","P","getAnimatableNone","functions","defaultValueTypes","color","$","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","invalidTemplates","DOMKeyframesResolver","owner","keyframe","t","getVariableValue","depth","errors","k","token","fallback","parseCSSVariable","exec","token1","token2","getComputedStyle","getPropertyValue","trimmed","resolveNoneKeyframes","originType","targetType","noneKeyframeIndexes","makeNoneKeyframesAnimatable","animatableTemplate","V","noneIndex","pageYOffset","measuredOrigin","measureViewportBox","measureKeyframe","jump","finalKeyframeIndex","unsetTransformName","unsetTransformValue","isAnimatable","BaseAnimation","autoplay","delay","repeatDelay","isStopped","hasAttemptedResolve","updateFinishedPromise","_resolved","onKeyframesResolved","onUpdate","isGenerator","canAnimate","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","K","hasKeyframesChanged","resolveFinishedPromise","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","Promise","calcGeneratorVelocity","resolveValue","prevT","velocity_per_second","R","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","spring","restDelta","resolveSpring","done","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","clamp","u","exponentialDecay","b","safeMin","exp","pow","g","factor","d","a","initialGuess","approximateRoot","isNaN","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","abs","angularFreq","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","calculatedDuration","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","checkCatchBoundary","hasUpdatedFrame","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","noop","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","aX","easeIn","easeOut","easeInOut","isEasingArray","mirrorEasing","easing","reverseEasing","circIn","acos","circOut","circInOut","backOut","backIn","backInOut","easingLookup","linear","anticipate","easingDefinitionToFunction","x1","y1","x2","y2","keyframeValues","times","easingFunctions","absoluteTimes","defaultOffset","arr","fillOffset","remaining","offsetProgress","progress","Y","o","mapTimeToKeyframe","interpolate","s","frameloopDriver","passTimestamp","stop","Pn","sync_time","X","generators","decay","tween","percentToProgress","percent","MainThreadAnimation","KeyframeResolver$1","holdTime","startTime","cancelTime","currentTime","playbackSpeed","pendingPlayState","teardown","onStop","onResolved","keyframes$1","mapPercentToKeyframes","mirroredGenerator","generatorFactory","pipe","C","generator","reverse","calcGeneratorDuration","Infinity","resolvedDuration","totalDuration","play","pause","tick","sample","speed","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","currentIteration","floor","iterationProgress","isOddIteration","isAnimationFinished","finish","driver","newSpeed","hasChanged","onPlay","stopDriver","isBezierDefinition","cubicBezierAsString","supportedWaapiEasing","mapEasingToNativeEasingWithDefault","mapEasingToNativeEasing","supportsWaapi","Element","acceleratedValues","AcceleratedAnimation","isWaapiSupportedEasing","every","pregeneratedAnimation","pregenerateKeyframes","sampleAnimation","pregeneratedKeyframes","animateStyle","valueName","keyframeOptions","iterations","direction","pendingTimeline","timeline","onfinish","playbackRate","playState","attachTimeline","sampleTime","setWithVelocity","supports","HTMLElement","animateMotionValue","isHandoff","valueTransition","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","shouldSkip","skipAnimations","isWillChangeMotionValue","animateTarget","targetAndTransition","transitionOverride","willChange","animations","animationTypeState","getState","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","HandoffAppearAnimations","appearId","shouldReduceMotion","setTarget","hasValue","addValue","es_value","BX","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","notify","first","last","sortNodePosition","reversePriorityOrder","numAnimationTypes","createTypeState","prevResolvedValues","id","PanSession","handlers","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","xDelta","yDelta","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","updateHandlers","subtractPoint","lastDevicePoint","timeDelta","timestampedPoint","lastPoint","calcLength","axis","isNear","maxDistance","calcAxisDelta","originPoint","translate","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","convertBoundingBoxToBox","isIdentityScale","hasScale","has2DTranslate","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","isInteger","translateAxis","transformAxis","transforms","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transformBoxPoints","topLeft","bottomRight","getContextWindow","ownerDocument","defaultView","elementDragControls","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","constraints_calcOrigin","sourceLength","targetLength","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","MeasureLayout","usePresence","useId","useEffect","jsx_runtime","jsx","applyTo","boxShadow","treeScale","projectionDelta","shadow","template","createTransformer","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","relativeProgress","delta_remove_xKeys","delta_remove_yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","aspectRatio","NodeStack","y4","scheduleRender","cl","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","children","isDirty","transformAxes","hiddenVisibility","visibility","create_projection_node_id","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","resetDistortingTransform","sharedAnimationValues","setStaticValue","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","subscription_manager","L","notifyListeners","args","subscriptionManager","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","unmount","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","HandoffCancelAllAnimations","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","S6","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","layoutScroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","nodeBox","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","output","mixAxis","to","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","canMix","animateSingleValue","motionValue$1","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","resetValues","_b","styles","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","string","roundPoint","DocumentProjectionNode","document","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","prefersReducedMotion","hasReducedMotionListener","visualElementStore","valueTypes","findValueType","featureNames","numFeatures","propEventHandlers","numVariantProps","VisualElement","_props","_prevProps","_visualElement","reducedMotionConfig","blockInitialAnimation","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","baseTarget","initialValues","manuallyAnimateOnMount","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","is_browser","j","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","valueIsTransform","removeOnChange","on","latestValue","removeOnRenderRequest","other","sortInstanceNodePosition","loadFeatures","renderedProps","isStrict","preloadedFeatures","initialLayoutGroupConfig","ProjectionNodeConstructor","FeatureConstructor","ProjectionNode","MeasureLayoutComponent","getClosestProjectingNode","allowProjection","updateFeatures","feature","build","measureInstanceViewportBox","getStaticValue","prevPresenceContext","listenerName","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","hasAnimated","removeValue","handleChildMotionValue","getVariant","getClosestVariantNode","getVariantContext","startAtParent","closestVariantNode","unsubscribe","removeValueFromRenderState","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","getBaseTarget","valueFromInitial","DOMVisualElement","arguments","compareDocumentPosition","HTMLVisualElement","defaultType","computedStyle","childSubscription","textContent","SVGVisualElement","getAttribute","create_visual_element_createDomVisualElement","Fragment","createAnimationState","animateVisualElement","resolvedDefinition","whileInView","whileDrag","whileFocus","isInitialRender","buildResolvedTypeValues","animateChanges","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","prevProp","variantDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","allKeys","markToAnimate","fallbackAnimation","fallbackTarget","shouldAnimate","setAnimateFunction","makeAnimator","updateAnimationControlsSubscription","subscribe","prevAnimate","prevIsPresent","exitAnimation","hasEnteredView","isInView","startObserver","viewport","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasOptionsChanged","hasViewportOptionChanged","prevViewport","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","removePointerListener","removeFocusListener","onFocus","isFocusVisible","onBlur","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","motion","createMotionProxy","createConfig","customMotionComponentConfig","motion_createMotionComponent","createVisualElement","useRender","ForwardRefComponent","forwardRef","externalRef","configAndProps","_","useLayoutId","layoutGroupId","useCreateMotionContext","getCurrentTreeVariants","useVisualElement","lazyContext","visualElementRef","useRef","renderer","useInsertionEffect","wantsHandoff","HandoffComplete","use_isomorphic_effect","jsxs","Provider","useCallback","Proxy","componentCache","_target","create_config_createDomMotionConfig","forwardMotionProps","baseConfig","createUseRender","useVisualProps","filteredProps","filterProps","isDom","elementProps","renderedChildren","createElement","checkStringStartsWith","isCSSVariableName","startsAsVariableToken","isCSSVariableToken","startsWithToken","singleCssVariableRegex","MotionGlobalConfig","addUniqueItem","item","removeItem","moveItem","fromIndex","toIndex","startIndex","endIndex","warning","_noop_mjs__WEBPACK_IMPORTED_MODULE_0__","invariant","input","isClamp","mixer","inputLength","_errors_mjs__WEBPACK_IMPORTED_MODULE_3__","mixers","createMixers","customMixer","mixerFactory","_mix_index_mjs__WEBPACK_IMPORTED_MODULE_0__","numMixers","easingFunction","_noop_mjs__WEBPACK_IMPORTED_MODULE_1__","_pipe_mjs__WEBPACK_IMPORTED_MODULE_2__","interpolator","progressInRange","_progress_mjs__WEBPACK_IMPORTED_MODULE_4__","_clamp_mjs__WEBPACK_IMPORTED_MODULE_5__","isBrowser","hueToRgb","q","mixLinearColor","fromExpo","expo","colorTypes","hex","rgba","m","hsla","J","getColorType","asRGBA","model","hslaToRgba","hue","saturation","lightness","alpha","red","green","blue","mixColor","fromRGBA","toRGBA","blended","invisibleValues","mixImmediate","mixNumber","getMixer","mixComplex","mixArray","mixObject","numValues","blendValue","originStats","targetStats","canInterpolate","indexes","var","matchOrder","orderedOrigin","pointers","types","originIndex","originValue","any","combineFunctions","transformers","toFromDifference","SubscriptionManager","subscriptions","_array_mjs__WEBPACK_IMPORTED_MODULE_0__","numSubscriptions","getSize","useConstant","init","useIsomorphicLayoutEffect","_is_browser_mjs__WEBPACK_IMPORTED_MODULE_1__","useLayoutEffect","velocityPerSecond","frameDuration","isFloat","collectMotionValues","MotionValue","version","canTrackVelocity","updateAndNotify","_frameloop_sync_time_mjs__WEBPACK_IMPORTED_MODULE_0__","updatedAt","setPrevFrameValue","setCurrent","change","renderRequest","prevFrameValue","prevUpdatedAt","onChange","subscription","_utils_subscription_manager_mjs__WEBPACK_IMPORTED_MODULE_1__","_frameloop_frame_mjs__WEBPACK_IMPORTED_MODULE_2__","clearListeners","eventManagers","attach","passiveEffect","stopPassiveEffect","endAnimation","getPrevious","_utils_velocity_per_second_mjs__WEBPACK_IMPORTED_MODULE_3__","animationStart","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","_utils_mjs__WEBPACK_IMPORTED_MODULE_0__","r","parseInt","_rgba_mjs__WEBPACK_IMPORTED_MODULE_1__","alpha$1","_numbers_units_mjs__WEBPACK_IMPORTED_MODULE_1__","_utils_mjs__WEBPACK_IMPORTED_MODULE_2__","Nw","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_3__","_rgba_mjs__WEBPACK_IMPORTED_MODULE_0__","_hex_mjs__WEBPACK_IMPORTED_MODULE_1__","_hsla_mjs__WEBPACK_IMPORTED_MODULE_2__","_utils_mjs__WEBPACK_IMPORTED_MODULE_3__","HD","clampRgbUnit","_utils_clamp_mjs__WEBPACK_IMPORTED_MODULE_0__","rgbUnit","_numbers_index_mjs__WEBPACK_IMPORTED_MODULE_1__","isColorString","testProp","mj","splitColor","aName","bName","cName","NUMBER_TOKEN","COLOR_TOKEN","complexRegex","analyseComplexValue","originalValue","toString","tokenised","_color_index_mjs__WEBPACK_IMPORTED_MODULE_1__","parsedValue","parseComplexValue","numSections","convertNumbersToZero","dA","parsed","transformer","createUnitType","endsWith","degrees","progressPercentage","sanitize","floatRegex","colorRegex","singleColorRegex","isString","isMotionValue"],"sourceRoot":""}