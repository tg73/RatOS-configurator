[gcode_macro M84]
rename_existing: M84.1
gcode:
	# turn motors off
	M84.1

	# reset is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

	# IDEX
	{% if printer["dual_carriage"] is defined %}
		# reset applied toolhead offset index
		_SET_TOOLHEAD_OFFSET T={printer["gcode_macro RatOS"].default_toolhead|int} MOVE=0
		# reset pressure advance toolhead syncing
		SET_GCODE_VARIABLE MACRO=SET_PRESSURE_ADVANCE VARIABLE=snyc_toolheads VALUE=False
		# reset swapped toolheads mode
		SET_GCODE_VARIABLE MACRO=_IDEX_REMAP_TOOLHEADS VARIABLE=enabled VALUE=False
		# reset spool join mode
		SET_GCODE_VARIABLE MACRO=_IDEX_JOIN_SPOOLS VARIABLE=enabled VALUE=False
		# reset vaoc state
		{% if printer["gcode_macro _VAOC"] is defined %}
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started VALUE=False
			SET_GCODE_VARIABLE MACRO=_VAOC VARIABLE=is_started_at_temp VALUE=False
		{% endif %}
		# reset IDEX offsets
		# this is a safety measurement
		SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
		# activate IDEX default
		_IDEX_SINGLE INIT=1
	{% endif %}

	# clear skew profile
	SET_SKEW CLEAR=1

	# visual feedback
	_LED_MOTORS_OFF


# do not call M104 from within RatOS macros
# use SET_HEATER_TEMPERATURE instead 
[gcode_macro M104]
rename_existing: M104.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}
	{% set t = 0 if t == -1 else t %}

	# IDEX mode
	{% set idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% endif %}

	DEBUG_ECHO PREFIX="M104" MSG="s: {s}, t: {t}"

	# set temperature offset
	{% if printer["gcode_macro T%s" % t] is defined %}
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			{% set temperature_offset_t0 = printer["gcode_macro T0"].temperature_offset|default(0)|int %}
			{% set temperature_offset_t1 = printer["gcode_macro T1"].temperature_offset|default(0)|int %}
			{% set s0 = [s + temperature_offset_t0, 0]|max %}
			{% set s1 = [s + temperature_offset_t1, 0]|max %}
			{% if temperature_offset_t0 != 0 %}
				RATOS_ECHO PREFIX="M104" MSG="Temperature offset of {temperature_offset_t0}°C added to toolhead T0."
			{% endif %}
			{% if temperature_offset_t1 != 0 %}
				RATOS_ECHO PREFIX="M104" MSG="Temperature offset of {temperature_offset_t1}°C added to toolhead T1."
			{% endif %}
		{% else %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set s = [s + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="M104" MSG="Temperature offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}
	{% endif %}

	# handle idex toolhead standby
	{% set is_in_standby = false %}
	{% if printer["dual_carriage"] is defined %}
		{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
		{% if toolchange_standby_temp > -1 %}
			{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
		{% endif %}
	{% endif %}

	# call klipper base function
	{% if not is_in_standby %}
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			M104.1 S{s0} T0
			M104.1 S{s1} T1
		{% else %}
			M104.1 S{s} T{t}
		{% endif %}
	{% endif %}


# do not call M109 from within RatOS macros
# use TEMPERATURE_WAIT instead 
[gcode_macro M109]
rename_existing: M109.1
gcode:
	# parameter
	{% set s = params.S|default(0)|int %}
	{% set t = params.T|default(-1)|int %}
	{% set t = 0 if t == -1 else t %}

	DEBUG_ECHO PREFIX="M109" MSG="s: {s}, t: {t}"

	# set temperature offset
	{% if printer["gcode_macro T%s" % t] is defined %}
		{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
		{% set s = [s + temperature_offset, 0]|max %}
		{% if temperature_offset != 0 %}
			RATOS_ECHO PREFIX="M109" MSG="Temperature offset of {temperature_offset}°C added to toolhead T{t}."
		{% endif %}
	{% endif %}

	# handle idex toolhead standby
	{% set is_in_standby = false %}
	{% if printer["dual_carriage"] is defined %}
		{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
		{% if toolchange_standby_temp > -1 %}
			{% set is_in_standby = true if printer["gcode_macro T%s" % t].standby|default(false)|lower == 'true' else false %}
		{% endif %}
	{% endif %}

	# call klipper base function
	{% if not is_in_standby %}
		M109.1 S{s} T{t}
	{% endif %}


[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: SET_HEATER_TEMPERATURE_BASE
gcode:
	# parameter
	{% set heater = params.HEATER|default("") %}
	{% set target = params.TARGET|default(0)|int %}

	DEBUG_ECHO PREFIX="SET_HEATER_TEMPERATURE" MSG="heater: {heater}, target: {target}"

	{% if heater|lower == "extruder" or heater|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if heater|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and target > 0 %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% set target = [target + temperature_offset, 0]|max %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="SET_HEATER_TEMPERATURE" MSG="Temperature offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	SET_HEATER_TEMPERATURE_BASE HEATER="{heater}" TARGET={target}


[gcode_macro TEMPERATURE_WAIT]
rename_existing: TEMPERATURE_WAIT_BASE
gcode:
	# parameter
	{% set sensor = params.SENSOR|default("") %}
	{% set minimum = params.MINIMUM|default(-1)|int %}
	{% set maximum = params.MAXIMUM|default(-1)|int %}

	DEBUG_ECHO PREFIX="TEMPERATURE_WAIT" MSG="sensor: {sensor}, minimum: {minimum}, maximum: {maximum}"

	{% if sensor|lower == "extruder" or sensor|lower == "extruder1" %}
		# get physical toolhead
		{% set t = 0 if sensor|lower == "extruder" else 1 %}

		# set temperature offset
		{% if printer["gcode_macro T%s" % t] is defined and (minimum > 0 or maximum > 0) %}
			{% set temperature_offset = printer["gcode_macro T%s" % t].temperature_offset|default(0)|int %}
			{% if minimum > -1 %}
				{% set minimum = [minimum + temperature_offset, 0]|max %}
			{% endif %}
			{% if maximum > -1 %}
				{% set maximum = [maximum + temperature_offset, 0]|max %}
			{% endif %}
			{% if temperature_offset != 0 %}
				RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Temperature offset of {temperature_offset}°C added to toolhead T{t}."
			{% endif %}
		{% endif %}

	{% endif %}

	# call klipper base function
	{% if minimum > -1 and maximum > -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MINIMUM: {minimum}, MAXIMUM: {maximum}"
		RATOS_ECHO MSG="please wait..."
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MINIMUM={minimum} MAXIMUM={maximum}
	{% elif minimum > -1 and maximum == -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MINIMUM: {minimum}"
		RATOS_ECHO MSG="please wait..."
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MINIMUM={minimum}
	{% elif minimum == -1 and maximum > -1 %}
		RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Waiting for sensor: {sensor}, MAXIMUM: {maximum}"
		RATOS_ECHO MSG="please wait..."
		TEMPERATURE_WAIT_BASE SENSOR="{sensor}" MAXIMUM={maximum}
	{% endif %}
	RATOS_ECHO PREFIX="TEMPERATURE_WAIT" MSG="Temperature for toolhead T{t} reached."


[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORG
gcode:
	SET_GCODE_OFFSET_ORG { rawparams }
	{% if printer.configfile.settings.beacon is defined and (params.Z_ADJUST is defined or params.Z is defined) %}
		_BEACON_APPLY_RUNTIME_MULTIPLIER
	{% endif %}


[gcode_macro SDCARD_PRINT_FILE]
rename_existing: SDCARD_PRINT_FILE_BASE
gcode:
	{% if printer["ratos"] is defined %}
		PROCESS_GCODE_FILE { rawparams }
	{% else %}
		SDCARD_PRINT_FILE_BASE { rawparams }
	{% endif %}


[gcode_macro SKEW_PROFILE]
rename_existing: SKEW_PROFILE_BASE
variable_loaded_profile: ""          # internal use only. Do not touch!
gcode:
	{% if params.LOAD is defined %}
		{% if printer.configfile.settings["skew_correction %s" % params.LOAD] is defined %}
			SET_GCODE_VARIABLE MACRO=SKEW_PROFILE VARIABLE=loaded_profile VALUE='"{params.LOAD}"'
		{% endif %}
	{% endif %}

	SKEW_PROFILE_BASE { rawparams }


[gcode_macro SET_SKEW]
rename_existing: SET_SKEW_BASE
gcode:
	{% if params.CLEAR is defined %}
		{% if params.CLEAR|default(0)|int == 1 %}
			SET_GCODE_VARIABLE MACRO=SKEW_PROFILE VARIABLE=loaded_profile VALUE='""'
		{% endif %}
	{% endif %}

	SET_SKEW_BASE { rawparams }


[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: SET_VELOCITY_LIMIT_BASE
gcode:
	{% if params.ACCEL_TO_DECEL is defined %}

		{% if params.ACCEL is defined %}
			{% set accel = params.ACCEL|float %}
		{% else %}
			{% set accel = printer.toolhead.max_accel|float %}
		{% endif %}

		{% if params.VELOCITY is defined %}
			{% set velocity = params.VELOCITY|float %}
		{% else %}
			{% set velocity = printer.toolhead.max_velocity|float %}
		{% endif %}

		{% if params.SQUARE_CORNER_VELOCITY is defined %}
			{% set scv = params.SQUARE_CORNER_VELOCITY|float %}
		{% else %}
			{% set scv = printer.toolhead.square_corner_velocity|float %}
		{% endif %}

		{% set mcr = params.ACCEL_TO_DECEL|float / accel %}

		DEBUG_ECHO PREFIX="SET_VELOCITY_LIMIT" MSG="ACCEL={accel}, VELOCITY={velocity}, SQUARE_CORNER_VELOCITY={scv}, MINIMUM_CRUISE_RATIO={mcr}"

		SET_VELOCITY_LIMIT_BASE ACCEL={accel} VELOCITY={velocity} SQUARE_CORNER_VELOCITY={scv} MINIMUM_CRUISE_RATIO={1-mcr}

	{% else %}

		SET_VELOCITY_LIMIT_BASE { rawparams }

	{% endif %}
